// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TENSOR_ACE_H_
#define FLATBUFFERS_GENERATED_TENSOR_ACE_H_


#include "types_generated.h"

namespace ace {

struct CacheData;
struct CacheDataT;

struct TensorShape;
struct TensorShapeT;

struct Tensor;
struct TensorT;

struct ListValue;
struct ListValueT;

struct Attribute;
struct AttributeT;

struct NamedAttrList;
struct NamedAttrListT;

inline const flatbuffers::TypeTable *CacheDataTypeTable();

inline const flatbuffers::TypeTable *TensorShapeTypeTable();

inline const flatbuffers::TypeTable *TensorTypeTable();

inline const flatbuffers::TypeTable *ListValueTypeTable();

inline const flatbuffers::TypeTable *AttributeTypeTable();

inline const flatbuffers::TypeTable *NamedAttrListTypeTable();

struct CacheDataT : public flatbuffers::NativeTable {
  typedef CacheData TableType;
  std::vector<uint8_t> u;
  std::vector<int8_t> c;
  std::vector<std::string> s;
  std::vector<int32_t> i;
  std::vector<int64_t> l;
  std::vector<float> f;
  int64_t size;
  CacheDataT()
      : size(0) {
  }
};

struct CacheData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CacheDataT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CacheDataTypeTable();
  }
  const flatbuffers::Vector<uint8_t> *u() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(4);
  }
  const flatbuffers::Vector<int8_t> *c() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(6);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *s() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(8);
  }
  const flatbuffers::Vector<int32_t> *i() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(10);
  }
  const flatbuffers::Vector<int64_t> *l() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(12);
  }
  const flatbuffers::Vector<float> *f() const {
    return GetPointer<const flatbuffers::Vector<float> *>(14);
  }
  int64_t size() const {
    return GetField<int64_t>(16, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyVector(u()) &&
           VerifyOffset(verifier, 6) &&
           verifier.VerifyVector(c()) &&
           VerifyOffset(verifier, 8) &&
           verifier.VerifyVector(s()) &&
           verifier.VerifyVectorOfStrings(s()) &&
           VerifyOffset(verifier, 10) &&
           verifier.VerifyVector(i()) &&
           VerifyOffset(verifier, 12) &&
           verifier.VerifyVector(l()) &&
           VerifyOffset(verifier, 14) &&
           verifier.VerifyVector(f()) &&
           VerifyField<int64_t>(verifier, 16) &&
           verifier.EndTable();
  }
  CacheDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CacheDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CacheData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CacheDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_u(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> u) {
    fbb_.AddOffset(4, u);
  }
  void add_c(flatbuffers::Offset<flatbuffers::Vector<int8_t>> c) {
    fbb_.AddOffset(6, c);
  }
  void add_s(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s) {
    fbb_.AddOffset(8, s);
  }
  void add_i(flatbuffers::Offset<flatbuffers::Vector<int32_t>> i) {
    fbb_.AddOffset(10, i);
  }
  void add_l(flatbuffers::Offset<flatbuffers::Vector<int64_t>> l) {
    fbb_.AddOffset(12, l);
  }
  void add_f(flatbuffers::Offset<flatbuffers::Vector<float>> f) {
    fbb_.AddOffset(14, f);
  }
  void add_size(int64_t size) {
    fbb_.AddElement<int64_t>(16, size, 0);
  }
  explicit CacheDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CacheDataBuilder &operator=(const CacheDataBuilder &);
  flatbuffers::Offset<CacheData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CacheData>(end);
    return o;
  }
};

inline flatbuffers::Offset<CacheData> CreateCacheData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> u = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> c = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> i = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> l = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> f = 0,
    int64_t size = 0) {
  CacheDataBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_f(f);
  builder_.add_l(l);
  builder_.add_i(i);
  builder_.add_s(s);
  builder_.add_c(c);
  builder_.add_u(u);
  return builder_.Finish();
}

flatbuffers::Offset<CacheData> CreateCacheData(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TensorShapeT : public flatbuffers::NativeTable {
  typedef TensorShape TableType;
  std::vector<int32_t> dims;
  TensorShapeT() {
  }
};

struct TensorShape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TensorShapeT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TensorShapeTypeTable();
  }
  const flatbuffers::Vector<int32_t> *dims() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(4);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyVector(dims()) &&
           verifier.EndTable();
  }
  TensorShapeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TensorShapeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TensorShape> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TensorShapeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dims(flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims) {
    fbb_.AddOffset(4, dims);
  }
  explicit TensorShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TensorShapeBuilder &operator=(const TensorShapeBuilder &);
  flatbuffers::Offset<TensorShape> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TensorShape>(end);
    return o;
  }
};

inline flatbuffers::Offset<TensorShape> CreateTensorShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims = 0) {
  TensorShapeBuilder builder_(_fbb);
  builder_.add_dims(dims);
  return builder_.Finish();
}

flatbuffers::Offset<TensorShape> CreateTensorShape(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TensorT : public flatbuffers::NativeTable {
  typedef Tensor TableType;
  std::string name;
  std::unique_ptr<TensorShapeT> shape;
  std::unique_ptr<TensorShapeT> valid_shape;
  DataType dtype;
  DataFormat dformat;
  std::unique_ptr<CacheDataT> data;
  std::unique_ptr<CacheDataT> scale;
  TensorT()
      : dtype(DataType_FLOAT_32),
        dformat(DataFormat_NCHW) {
  }
};

struct Tensor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TensorT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TensorTypeTable();
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(4);
  }
  const TensorShape *shape() const {
    return GetPointer<const TensorShape *>(6);
  }
  const TensorShape *valid_shape() const {
    return GetPointer<const TensorShape *>(8);
  }
  DataType dtype() const {
    return static_cast<DataType>(GetField<int8_t>(10, 10));
  }
  DataFormat dformat() const {
    return static_cast<DataFormat>(GetField<int8_t>(12, 1));
  }
  const CacheData *data() const {
    return GetPointer<const CacheData *>(14);
  }
  const CacheData *scale() const {
    return GetPointer<const CacheData *>(16);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, 6) &&
           verifier.VerifyTable(shape()) &&
           VerifyOffset(verifier, 8) &&
           verifier.VerifyTable(valid_shape()) &&
           VerifyField<int8_t>(verifier, 10) &&
           VerifyField<int8_t>(verifier, 12) &&
           VerifyOffset(verifier, 14) &&
           verifier.VerifyTable(data()) &&
           VerifyOffset(verifier, 16) &&
           verifier.VerifyTable(scale()) &&
           verifier.EndTable();
  }
  TensorT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TensorT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Tensor> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TensorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(4, name);
  }
  void add_shape(flatbuffers::Offset<TensorShape> shape) {
    fbb_.AddOffset(6, shape);
  }
  void add_valid_shape(flatbuffers::Offset<TensorShape> valid_shape) {
    fbb_.AddOffset(8, valid_shape);
  }
  void add_dtype(DataType dtype) {
    fbb_.AddElement<int8_t>(10, static_cast<int8_t>(dtype), 10);
  }
  void add_dformat(DataFormat dformat) {
    fbb_.AddElement<int8_t>(12, static_cast<int8_t>(dformat), 1);
  }
  void add_data(flatbuffers::Offset<CacheData> data) {
    fbb_.AddOffset(14, data);
  }
  void add_scale(flatbuffers::Offset<CacheData> scale) {
    fbb_.AddOffset(16, scale);
  }
  explicit TensorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TensorBuilder &operator=(const TensorBuilder &);
  flatbuffers::Offset<Tensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tensor>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tensor> CreateTensor(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<TensorShape> shape = 0,
    flatbuffers::Offset<TensorShape> valid_shape = 0,
    DataType dtype = DataType_FLOAT_32,
    DataFormat dformat = DataFormat_NCHW,
    flatbuffers::Offset<CacheData> data = 0,
    flatbuffers::Offset<CacheData> scale = 0) {
  TensorBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_data(data);
  builder_.add_valid_shape(valid_shape);
  builder_.add_shape(shape);
  builder_.add_name(name);
  builder_.add_dformat(dformat);
  builder_.add_dtype(dtype);
  return builder_.Finish();
}

flatbuffers::Offset<Tensor> CreateTensor(flatbuffers::FlatBufferBuilder &_fbb, const TensorT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ListValueT : public flatbuffers::NativeTable {
  typedef ListValue TableType;
  std::vector<std::string> s;
  std::vector<int32_t> i;
  std::vector<float> f;
  std::vector<bool> b;
  std::vector<DataType> type;
  ListValueT() {
  }
};

struct ListValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ListValueT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ListValueTypeTable();
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *s() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(4);
  }
  const flatbuffers::Vector<int32_t> *i() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(6);
  }
  const flatbuffers::Vector<float> *f() const {
    return GetPointer<const flatbuffers::Vector<float> *>(8);
  }
  const flatbuffers::Vector<uint8_t> *b() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(10);
  }
  const flatbuffers::Vector<int8_t> *type() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(12);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyVector(s()) &&
           verifier.VerifyVectorOfStrings(s()) &&
           VerifyOffset(verifier, 6) &&
           verifier.VerifyVector(i()) &&
           VerifyOffset(verifier, 8) &&
           verifier.VerifyVector(f()) &&
           VerifyOffset(verifier, 10) &&
           verifier.VerifyVector(b()) &&
           VerifyOffset(verifier, 12) &&
           verifier.VerifyVector(type()) &&
           verifier.EndTable();
  }
  ListValueT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ListValueT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ListValue> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ListValueBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s) {
    fbb_.AddOffset(4, s);
  }
  void add_i(flatbuffers::Offset<flatbuffers::Vector<int32_t>> i) {
    fbb_.AddOffset(6, i);
  }
  void add_f(flatbuffers::Offset<flatbuffers::Vector<float>> f) {
    fbb_.AddOffset(8, f);
  }
  void add_b(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> b) {
    fbb_.AddOffset(10, b);
  }
  void add_type(flatbuffers::Offset<flatbuffers::Vector<int8_t>> type) {
    fbb_.AddOffset(12, type);
  }
  explicit ListValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ListValueBuilder &operator=(const ListValueBuilder &);
  flatbuffers::Offset<ListValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ListValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<ListValue> CreateListValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> i = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> f = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> b = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> type = 0) {
  ListValueBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_b(b);
  builder_.add_f(f);
  builder_.add_i(i);
  builder_.add_s(s);
  return builder_.Finish();
}

flatbuffers::Offset<ListValue> CreateListValue(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AttributeT : public flatbuffers::NativeTable {
  typedef Attribute TableType;
  std::string s;
  int32_t i;
  bool b;
  std::string key;
  DataType type;
  float f;
  std::unique_ptr<TensorT> tensor;
  std::unique_ptr<ListValueT> list;
  std::unique_ptr<NamedAttrListT> func;
  AttributeT()
      : i(0),
        b(false),
        type(DataType_NONE),
        f(0.0f) {
  }
};

struct Attribute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AttributeT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AttributeTypeTable();
  }
  const flatbuffers::String *s() const {
    return GetPointer<const flatbuffers::String *>(4);
  }
  int32_t i() const {
    return GetField<int32_t>(6, 0);
  }
  bool b() const {
    return GetField<uint8_t>(8, 0) != 0;
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(10);
  }
  bool KeyCompareLessThan(const Attribute *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(key()->c_str(), val);
  }
  DataType type() const {
    return static_cast<DataType>(GetField<int8_t>(12, 0));
  }
  float f() const {
    return GetField<float>(14, 0.0f);
  }
  const Tensor *tensor() const {
    return GetPointer<const Tensor *>(16);
  }
  const ListValue *list() const {
    return GetPointer<const ListValue *>(18);
  }
  const NamedAttrList *func() const {
    return GetPointer<const NamedAttrList *>(20);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyString(s()) &&
           VerifyField<int32_t>(verifier, 6) &&
           VerifyField<uint8_t>(verifier, 8) &&
           VerifyOffsetRequired(verifier, 10) &&
           verifier.VerifyString(key()) &&
           VerifyField<int8_t>(verifier, 12) &&
           VerifyField<float>(verifier, 14) &&
           VerifyOffset(verifier, 16) &&
           verifier.VerifyTable(tensor()) &&
           VerifyOffset(verifier, 18) &&
           verifier.VerifyTable(list()) &&
           VerifyOffset(verifier, 20) &&
           verifier.VerifyTable(func()) &&
           verifier.EndTable();
  }
  AttributeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AttributeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Attribute> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AttributeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s(flatbuffers::Offset<flatbuffers::String> s) {
    fbb_.AddOffset(4, s);
  }
  void add_i(int32_t i) {
    fbb_.AddElement<int32_t>(6, i, 0);
  }
  void add_b(bool b) {
    fbb_.AddElement<uint8_t>(8, static_cast<uint8_t>(b), 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(10, key);
  }
  void add_type(DataType type) {
    fbb_.AddElement<int8_t>(12, static_cast<int8_t>(type), 0);
  }
  void add_f(float f) {
    fbb_.AddElement<float>(14, f, 0.0f);
  }
  void add_tensor(flatbuffers::Offset<Tensor> tensor) {
    fbb_.AddOffset(16, tensor);
  }
  void add_list(flatbuffers::Offset<ListValue> list) {
    fbb_.AddOffset(18, list);
  }
  void add_func(flatbuffers::Offset<NamedAttrList> func) {
    fbb_.AddOffset(20, func);
  }
  explicit AttributeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AttributeBuilder &operator=(const AttributeBuilder &);
  flatbuffers::Offset<Attribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Attribute>(end);
    fbb_.Required(o, 10);
    return o;
  }
};

inline flatbuffers::Offset<Attribute> CreateAttribute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> s = 0,
    int32_t i = 0,
    bool b = false,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    DataType type = DataType_NONE,
    float f = 0.0f,
    flatbuffers::Offset<Tensor> tensor = 0,
    flatbuffers::Offset<ListValue> list = 0,
    flatbuffers::Offset<NamedAttrList> func = 0) {
  AttributeBuilder builder_(_fbb);
  builder_.add_func(func);
  builder_.add_list(list);
  builder_.add_tensor(tensor);
  builder_.add_f(f);
  builder_.add_key(key);
  builder_.add_i(i);
  builder_.add_s(s);
  builder_.add_type(type);
  builder_.add_b(b);
  return builder_.Finish();
}

flatbuffers::Offset<Attribute> CreateAttribute(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NamedAttrListT : public flatbuffers::NativeTable {
  typedef NamedAttrList TableType;
  std::string name;
  std::vector<std::unique_ptr<AttributeT>> attr;
  NamedAttrListT() {
  }
};

struct NamedAttrList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NamedAttrListT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NamedAttrListTypeTable();
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(4);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Attribute>> *attr() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Attribute>> *>(6);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, 6) &&
           verifier.VerifyVector(attr()) &&
           verifier.VerifyVectorOfTables(attr()) &&
           verifier.EndTable();
  }
  NamedAttrListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NamedAttrListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NamedAttrList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NamedAttrListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(4, name);
  }
  void add_attr(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Attribute>>> attr) {
    fbb_.AddOffset(6, attr);
  }
  explicit NamedAttrListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NamedAttrListBuilder &operator=(const NamedAttrListBuilder &);
  flatbuffers::Offset<NamedAttrList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NamedAttrList>(end);
    return o;
  }
};

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Attribute>>> attr = 0) {
  NamedAttrListBuilder builder_(_fbb);
  builder_.add_attr(attr);
  builder_.add_name(name);
  return builder_.Finish();
}

flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CacheDataT *CacheData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CacheDataT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void CacheData::UnPackTo(CacheDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = u(); if (_e) { _o->u.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->u[_i] = _e->Get(_i); } } };
  { auto _e = c(); if (_e) { _o->c.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->c[_i] = _e->Get(_i); } } };
  { auto _e = s(); if (_e) { _o->s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->s[_i] = _e->Get(_i)->str(); } } };
  { auto _e = i(); if (_e) { _o->i.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->i[_i] = _e->Get(_i); } } };
  { auto _e = l(); if (_e) { _o->l.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->l[_i] = _e->Get(_i); } } };
  { auto _e = f(); if (_e) { _o->f.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->f[_i] = _e->Get(_i); } } };
  { auto _e = size(); _o->size = _e; };
}

inline flatbuffers::Offset<CacheData> CacheData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCacheData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CacheData> CreateCacheData(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CacheDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _u = _o->u.size() ? _fbb.CreateVector(_o->u) : 0;
  auto _c = _o->c.size() ? _fbb.CreateVector(_o->c) : 0;
  auto _s = _o->s.size() ? _fbb.CreateVectorOfStrings(_o->s) : 0;
  auto _i = _o->i.size() ? _fbb.CreateVector(_o->i) : 0;
  auto _l = _o->l.size() ? _fbb.CreateVector(_o->l) : 0;
  auto _f = _o->f.size() ? _fbb.CreateVector(_o->f) : 0;
  auto _size = _o->size;
  return ace::CreateCacheData(
      _fbb,
      _u,
      _c,
      _s,
      _i,
      _l,
      _f,
      _size);
}

inline TensorShapeT *TensorShape::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TensorShapeT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TensorShape::UnPackTo(TensorShapeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dims(); if (_e) { _o->dims.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dims[_i] = _e->Get(_i); } } };
}

inline flatbuffers::Offset<TensorShape> TensorShape::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTensorShape(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TensorShape> CreateTensorShape(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TensorShapeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dims = _o->dims.size() ? _fbb.CreateVector(_o->dims) : 0;
  return ace::CreateTensorShape(
      _fbb,
      _dims);
}

inline TensorT *Tensor::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TensorT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Tensor::UnPackTo(TensorT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = shape(); if (_e) _o->shape = std::unique_ptr<TensorShapeT>(_e->UnPack(_resolver)); };
  { auto _e = valid_shape(); if (_e) _o->valid_shape = std::unique_ptr<TensorShapeT>(_e->UnPack(_resolver)); };
  { auto _e = dtype(); _o->dtype = _e; };
  { auto _e = dformat(); _o->dformat = _e; };
  { auto _e = data(); if (_e) _o->data = std::unique_ptr<CacheDataT>(_e->UnPack(_resolver)); };
  { auto _e = scale(); if (_e) _o->scale = std::unique_ptr<CacheDataT>(_e->UnPack(_resolver)); };
}

inline flatbuffers::Offset<Tensor> Tensor::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTensor(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Tensor> CreateTensor(flatbuffers::FlatBufferBuilder &_fbb, const TensorT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TensorT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _shape = _o->shape ? CreateTensorShape(_fbb, _o->shape.get(), _rehasher) : 0;
  auto _valid_shape = _o->valid_shape ? CreateTensorShape(_fbb, _o->valid_shape.get(), _rehasher) : 0;
  auto _dtype = _o->dtype;
  auto _dformat = _o->dformat;
  auto _data = _o->data ? CreateCacheData(_fbb, _o->data.get(), _rehasher) : 0;
  auto _scale = _o->scale ? CreateCacheData(_fbb, _o->scale.get(), _rehasher) : 0;
  return ace::CreateTensor(
      _fbb,
      _name,
      _shape,
      _valid_shape,
      _dtype,
      _dformat,
      _data,
      _scale);
}

inline ListValueT *ListValue::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ListValueT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ListValue::UnPackTo(ListValueT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = s(); if (_e) { _o->s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->s[_i] = _e->Get(_i)->str(); } } };
  { auto _e = i(); if (_e) { _o->i.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->i[_i] = _e->Get(_i); } } };
  { auto _e = f(); if (_e) { _o->f.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->f[_i] = _e->Get(_i); } } };
  { auto _e = b(); if (_e) { _o->b.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->b[_i] = _e->Get(_i) != 0; } } };
  { auto _e = type(); if (_e) { _o->type.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->type[_i] = static_cast<DataType>(_e->Get(_i)); } } };
}

inline flatbuffers::Offset<ListValue> ListValue::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateListValue(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ListValue> CreateListValue(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ListValueT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _s = _o->s.size() ? _fbb.CreateVectorOfStrings(_o->s) : 0;
  auto _i = _o->i.size() ? _fbb.CreateVector(_o->i) : 0;
  auto _f = _o->f.size() ? _fbb.CreateVector(_o->f) : 0;
  auto _b = _o->b.size() ? _fbb.CreateVector(_o->b) : 0;
  auto _type = _o->type.size() ? _fbb.CreateVectorScalarCast<int8_t>(flatbuffers::data(_o->type), _o->type.size()) : 0;
  return ace::CreateListValue(
      _fbb,
      _s,
      _i,
      _f,
      _b,
      _type);
}

inline AttributeT *Attribute::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new AttributeT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Attribute::UnPackTo(AttributeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = s(); if (_e) _o->s = _e->str(); };
  { auto _e = i(); _o->i = _e; };
  { auto _e = b(); _o->b = _e; };
  { auto _e = key(); if (_e) _o->key = _e->str(); };
  { auto _e = type(); _o->type = _e; };
  { auto _e = f(); _o->f = _e; };
  { auto _e = tensor(); if (_e) _o->tensor = std::unique_ptr<TensorT>(_e->UnPack(_resolver)); };
  { auto _e = list(); if (_e) _o->list = std::unique_ptr<ListValueT>(_e->UnPack(_resolver)); };
  { auto _e = func(); if (_e) _o->func = std::unique_ptr<NamedAttrListT>(_e->UnPack(_resolver)); };
}

inline flatbuffers::Offset<Attribute> Attribute::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAttribute(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Attribute> CreateAttribute(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AttributeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _s = _o->s.empty() ? 0 : _fbb.CreateString(_o->s);
  auto _i = _o->i;
  auto _b = _o->b;
  auto _key = _fbb.CreateString(_o->key);
  auto _type = _o->type;
  auto _f = _o->f;
  auto _tensor = _o->tensor ? CreateTensor(_fbb, _o->tensor.get(), _rehasher) : 0;
  auto _list = _o->list ? CreateListValue(_fbb, _o->list.get(), _rehasher) : 0;
  auto _func = _o->func ? CreateNamedAttrList(_fbb, _o->func.get(), _rehasher) : 0;
  return ace::CreateAttribute(
      _fbb,
      _s,
      _i,
      _b,
      _key,
      _type,
      _f,
      _tensor,
      _list,
      _func);
}

inline NamedAttrListT *NamedAttrList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new NamedAttrListT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void NamedAttrList::UnPackTo(NamedAttrListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = attr(); if (_e) { _o->attr.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->attr[_i] = std::unique_ptr<AttributeT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<NamedAttrList> NamedAttrList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNamedAttrList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NamedAttrListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _attr = _o->attr.size() ? _fbb.CreateVector<flatbuffers::Offset<Attribute>> (_o->attr.size(), [](size_t i, _VectorArgs *__va) { return CreateAttribute(*__va->__fbb, __va->__o->attr[i].get(), __va->__rehasher); }, &_va ) : 0;
  return ace::CreateNamedAttrList(
      _fbb,
      _name,
      _attr);
}

inline const flatbuffers::TypeTable *CacheDataTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_CHAR, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_LONG, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_LONG, 0, -1 }
  };
  static const char * const names[] = {
    "u",
    "c",
    "s",
    "i",
    "l",
    "f",
    "size"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TensorShapeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 1, -1 }
  };
  static const char * const names[] = {
    "dims"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TensorTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 1 },
    { flatbuffers::ET_CHAR, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    TensorShapeTypeTable,
    DataTypeTypeTable,
    DataFormatTypeTable,
    CacheDataTypeTable
  };
  static const char * const names[] = {
    "name",
    "shape",
    "valid_shape",
    "dtype",
    "dformat",
    "data",
    "scale"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ListValueTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_BOOL, 1, -1 },
    { flatbuffers::ET_CHAR, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    DataTypeTypeTable
  };
  static const char * const names[] = {
    "s",
    "i",
    "f",
    "b",
    "type"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *AttributeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    DataTypeTypeTable,
    TensorTypeTable,
    ListValueTypeTable,
    NamedAttrListTypeTable
  };
  static const char * const names[] = {
    "s",
    "i",
    "b",
    "key",
    "type",
    "f",
    "tensor",
    "list",
    "func"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 9, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *NamedAttrListTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    AttributeTypeTable
  };
  static const char * const names[] = {
    "name",
    "attr"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace ace

#endif  // FLATBUFFERS_GENERATED_TENSOR_ACE_H_
