// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OP_ACE_H_
#define FLATBUFFERS_GENERATED_OP_ACE_H_


#include "op_option_generated.h"
#include "tensor_generated.h"
#include "types_generated.h"

namespace ace {

struct Op;
struct OpT;

inline const flatbuffers::TypeTable *OpTypeTable();

enum OpType {
  OpType_Default = 0,
  OpType_Const = 1,
  OpType_Abs = 2,
  OpType_BoundedRelu = 3,
  OpType_Clip = 4,
  OpType_ClipV2 = 5,
  OpType_ClippedRelu = 6,
  OpType_Elu = 7,
  OpType_Exp = 8,
  OpType_GeluTanh = 9,
  OpType_HardSigmoid = 10,
  OpType_HardSwish = 11,
  OpType_LeakyRelu = 12,
  OpType_Linear = 13,
  OpType_Log = 14,
  OpType_Logistic = 15,
  OpType_LogSigmoid = 16,
  OpType_Mish = 17,
  OpType_Pow = 18,
  OpType_PRelu = 19,
  OpType_Relu = 20,
  OpType_Relu6 = 21,
  OpType_Round = 22,
  OpType_Selu = 23,
  OpType_Sigmoid = 24,
  OpType_SoftRelu = 25,
  OpType_SoftReluV2 = 26,
  OpType_Sqrt = 27,
  OpType_Swish = 28,
  OpType_Tanh = 29,
  OpType_Add = 30,
  OpType_Mul = 31,
  OpType_Min = 32,
  OpType_Max = 33,
  OpType_Mean = 34,
  OpType_Div = 35,
  OpType_GreaterEqual = 36,
  OpType_GreaterThan = 37,
  OpType_LessEqual = 38,
  OpType_LessThan = 39,
  OpType_EqualTo = 40,
  OpType_NotEqual = 41,
  OpType_ReduceMin = 42,
  OpType_ReduceMax = 43,
  OpType_ReduceMean = 44,
  OpType_ReduceSum = 45,
  OpType_ReduceMul = 46,
  OpType_Pool2D = 47,
  OpType_Pool3D = 48,
  OpType_Reshape = 49,
  OpType_Slice = 50,
  OpType_Flatten = 51,
  OpType_Permute = 52,
  OpType_ArgMax = 53,
  OpType_BatchNorm = 54,
  OpType_Conv2D = 55,
  OpType_Conv3D = 56,
  OpType_InnerProduct = 57,
  OpType_LRN = 58,
  OpType_Normalize = 59,
  OpType_PriorBox = 60,
  OpType_Proposal = 61,
  OpType_Resize = 62,
  OpType_RoiPooling = 63,
  OpType_Scale = 64,
  OpType_Softmax = 65,
  OpType_Input = 66,
  OpType_MIN = OpType_Default,
  OpType_MAX = OpType_Input
};

inline const OpType (&EnumValuesOpType())[67] {
  static const OpType values[] = {
    OpType_Default,
    OpType_Const,
    OpType_Abs,
    OpType_BoundedRelu,
    OpType_Clip,
    OpType_ClipV2,
    OpType_ClippedRelu,
    OpType_Elu,
    OpType_Exp,
    OpType_GeluTanh,
    OpType_HardSigmoid,
    OpType_HardSwish,
    OpType_LeakyRelu,
    OpType_Linear,
    OpType_Log,
    OpType_Logistic,
    OpType_LogSigmoid,
    OpType_Mish,
    OpType_Pow,
    OpType_PRelu,
    OpType_Relu,
    OpType_Relu6,
    OpType_Round,
    OpType_Selu,
    OpType_Sigmoid,
    OpType_SoftRelu,
    OpType_SoftReluV2,
    OpType_Sqrt,
    OpType_Swish,
    OpType_Tanh,
    OpType_Add,
    OpType_Mul,
    OpType_Min,
    OpType_Max,
    OpType_Mean,
    OpType_Div,
    OpType_GreaterEqual,
    OpType_GreaterThan,
    OpType_LessEqual,
    OpType_LessThan,
    OpType_EqualTo,
    OpType_NotEqual,
    OpType_ReduceMin,
    OpType_ReduceMax,
    OpType_ReduceMean,
    OpType_ReduceSum,
    OpType_ReduceMul,
    OpType_Pool2D,
    OpType_Pool3D,
    OpType_Reshape,
    OpType_Slice,
    OpType_Flatten,
    OpType_Permute,
    OpType_ArgMax,
    OpType_BatchNorm,
    OpType_Conv2D,
    OpType_Conv3D,
    OpType_InnerProduct,
    OpType_LRN,
    OpType_Normalize,
    OpType_PriorBox,
    OpType_Proposal,
    OpType_Resize,
    OpType_RoiPooling,
    OpType_Scale,
    OpType_Softmax,
    OpType_Input
  };
  return values;
}

inline const char * const *EnumNamesOpType() {
  static const char * const names[] = {
    "Default",
    "Const",
    "Abs",
    "BoundedRelu",
    "Clip",
    "ClipV2",
    "ClippedRelu",
    "Elu",
    "Exp",
    "GeluTanh",
    "HardSigmoid",
    "HardSwish",
    "LeakyRelu",
    "Linear",
    "Log",
    "Logistic",
    "LogSigmoid",
    "Mish",
    "Pow",
    "PRelu",
    "Relu",
    "Relu6",
    "Round",
    "Selu",
    "Sigmoid",
    "SoftRelu",
    "SoftReluV2",
    "Sqrt",
    "Swish",
    "Tanh",
    "Add",
    "Mul",
    "Min",
    "Max",
    "Mean",
    "Div",
    "GreaterEqual",
    "GreaterThan",
    "LessEqual",
    "LessThan",
    "EqualTo",
    "NotEqual",
    "ReduceMin",
    "ReduceMax",
    "ReduceMean",
    "ReduceSum",
    "ReduceMul",
    "Pool2D",
    "Pool3D",
    "Reshape",
    "Slice",
    "Flatten",
    "Permute",
    "ArgMax",
    "BatchNorm",
    "Conv2D",
    "Conv3D",
    "InnerProduct",
    "LRN",
    "Normalize",
    "PriorBox",
    "Proposal",
    "Resize",
    "RoiPooling",
    "Scale",
    "Softmax",
    "Input",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpType(OpType e) {
  if (e < OpType_Default || e > OpType_Input) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesOpType()[index];
}

struct OpT : public flatbuffers::NativeTable {
  typedef Op TableType;
  std::string name;
  std::vector<int32_t> inputs;
  std::vector<int32_t> outputs;
  OpOptionUnion option;
  OpType type;
  std::string desc;
  OpT()
      : type(OpType_Default) {
  }
};

struct Op FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OpT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return OpTypeTable();
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(4);
  }
  const flatbuffers::Vector<int32_t> *inputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(6);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(8);
  }
  OpOption option_type() const {
    return static_cast<OpOption>(GetField<uint8_t>(10, 0));
  }
  const void *option() const {
    return GetPointer<const void *>(12);
  }
  template<typename T> const T *option_as() const;
  const DefaultOption *option_as_DefaultOption() const {
    return option_type() == OpOption_DefaultOption ? static_cast<const DefaultOption *>(option()) : nullptr;
  }
  const ConstOption *option_as_ConstOption() const {
    return option_type() == OpOption_ConstOption ? static_cast<const ConstOption *>(option()) : nullptr;
  }
  const AbsOption *option_as_AbsOption() const {
    return option_type() == OpOption_AbsOption ? static_cast<const AbsOption *>(option()) : nullptr;
  }
  const BoundedReluOption *option_as_BoundedReluOption() const {
    return option_type() == OpOption_BoundedReluOption ? static_cast<const BoundedReluOption *>(option()) : nullptr;
  }
  const ClipOption *option_as_ClipOption() const {
    return option_type() == OpOption_ClipOption ? static_cast<const ClipOption *>(option()) : nullptr;
  }
  const ClipV2Option *option_as_ClipV2Option() const {
    return option_type() == OpOption_ClipV2Option ? static_cast<const ClipV2Option *>(option()) : nullptr;
  }
  const ClippedReluOption *option_as_ClippedReluOption() const {
    return option_type() == OpOption_ClippedReluOption ? static_cast<const ClippedReluOption *>(option()) : nullptr;
  }
  const EluOption *option_as_EluOption() const {
    return option_type() == OpOption_EluOption ? static_cast<const EluOption *>(option()) : nullptr;
  }
  const ExpOption *option_as_ExpOption() const {
    return option_type() == OpOption_ExpOption ? static_cast<const ExpOption *>(option()) : nullptr;
  }
  const GeluTanhOption *option_as_GeluTanhOption() const {
    return option_type() == OpOption_GeluTanhOption ? static_cast<const GeluTanhOption *>(option()) : nullptr;
  }
  const HardSigmoidOption *option_as_HardSigmoidOption() const {
    return option_type() == OpOption_HardSigmoidOption ? static_cast<const HardSigmoidOption *>(option()) : nullptr;
  }
  const HardSwishOption *option_as_HardSwishOption() const {
    return option_type() == OpOption_HardSwishOption ? static_cast<const HardSwishOption *>(option()) : nullptr;
  }
  const LeakyReluOption *option_as_LeakyReluOption() const {
    return option_type() == OpOption_LeakyReluOption ? static_cast<const LeakyReluOption *>(option()) : nullptr;
  }
  const LinearOption *option_as_LinearOption() const {
    return option_type() == OpOption_LinearOption ? static_cast<const LinearOption *>(option()) : nullptr;
  }
  const LogOption *option_as_LogOption() const {
    return option_type() == OpOption_LogOption ? static_cast<const LogOption *>(option()) : nullptr;
  }
  const LogisticOption *option_as_LogisticOption() const {
    return option_type() == OpOption_LogisticOption ? static_cast<const LogisticOption *>(option()) : nullptr;
  }
  const LogSigmoidOption *option_as_LogSigmoidOption() const {
    return option_type() == OpOption_LogSigmoidOption ? static_cast<const LogSigmoidOption *>(option()) : nullptr;
  }
  const MishOption *option_as_MishOption() const {
    return option_type() == OpOption_MishOption ? static_cast<const MishOption *>(option()) : nullptr;
  }
  const PowOption *option_as_PowOption() const {
    return option_type() == OpOption_PowOption ? static_cast<const PowOption *>(option()) : nullptr;
  }
  const PReluOption *option_as_PReluOption() const {
    return option_type() == OpOption_PReluOption ? static_cast<const PReluOption *>(option()) : nullptr;
  }
  const ReluOption *option_as_ReluOption() const {
    return option_type() == OpOption_ReluOption ? static_cast<const ReluOption *>(option()) : nullptr;
  }
  const Relu6Option *option_as_Relu6Option() const {
    return option_type() == OpOption_Relu6Option ? static_cast<const Relu6Option *>(option()) : nullptr;
  }
  const RoundOption *option_as_RoundOption() const {
    return option_type() == OpOption_RoundOption ? static_cast<const RoundOption *>(option()) : nullptr;
  }
  const SeluOption *option_as_SeluOption() const {
    return option_type() == OpOption_SeluOption ? static_cast<const SeluOption *>(option()) : nullptr;
  }
  const SigmoidOption *option_as_SigmoidOption() const {
    return option_type() == OpOption_SigmoidOption ? static_cast<const SigmoidOption *>(option()) : nullptr;
  }
  const SoftReluOption *option_as_SoftReluOption() const {
    return option_type() == OpOption_SoftReluOption ? static_cast<const SoftReluOption *>(option()) : nullptr;
  }
  const SoftReluV2Option *option_as_SoftReluV2Option() const {
    return option_type() == OpOption_SoftReluV2Option ? static_cast<const SoftReluV2Option *>(option()) : nullptr;
  }
  const SqrtOption *option_as_SqrtOption() const {
    return option_type() == OpOption_SqrtOption ? static_cast<const SqrtOption *>(option()) : nullptr;
  }
  const SwishOption *option_as_SwishOption() const {
    return option_type() == OpOption_SwishOption ? static_cast<const SwishOption *>(option()) : nullptr;
  }
  const TanhOption *option_as_TanhOption() const {
    return option_type() == OpOption_TanhOption ? static_cast<const TanhOption *>(option()) : nullptr;
  }
  const AddOption *option_as_AddOption() const {
    return option_type() == OpOption_AddOption ? static_cast<const AddOption *>(option()) : nullptr;
  }
  const MulOption *option_as_MulOption() const {
    return option_type() == OpOption_MulOption ? static_cast<const MulOption *>(option()) : nullptr;
  }
  const MinOption *option_as_MinOption() const {
    return option_type() == OpOption_MinOption ? static_cast<const MinOption *>(option()) : nullptr;
  }
  const MaxOption *option_as_MaxOption() const {
    return option_type() == OpOption_MaxOption ? static_cast<const MaxOption *>(option()) : nullptr;
  }
  const MeanOption *option_as_MeanOption() const {
    return option_type() == OpOption_MeanOption ? static_cast<const MeanOption *>(option()) : nullptr;
  }
  const DivOption *option_as_DivOption() const {
    return option_type() == OpOption_DivOption ? static_cast<const DivOption *>(option()) : nullptr;
  }
  const GreaterEqualOption *option_as_GreaterEqualOption() const {
    return option_type() == OpOption_GreaterEqualOption ? static_cast<const GreaterEqualOption *>(option()) : nullptr;
  }
  const GreaterThanOption *option_as_GreaterThanOption() const {
    return option_type() == OpOption_GreaterThanOption ? static_cast<const GreaterThanOption *>(option()) : nullptr;
  }
  const LessEqualOption *option_as_LessEqualOption() const {
    return option_type() == OpOption_LessEqualOption ? static_cast<const LessEqualOption *>(option()) : nullptr;
  }
  const LessThanOption *option_as_LessThanOption() const {
    return option_type() == OpOption_LessThanOption ? static_cast<const LessThanOption *>(option()) : nullptr;
  }
  const EqualToOption *option_as_EqualToOption() const {
    return option_type() == OpOption_EqualToOption ? static_cast<const EqualToOption *>(option()) : nullptr;
  }
  const NotEqualOption *option_as_NotEqualOption() const {
    return option_type() == OpOption_NotEqualOption ? static_cast<const NotEqualOption *>(option()) : nullptr;
  }
  const ReduceMinOption *option_as_ReduceMinOption() const {
    return option_type() == OpOption_ReduceMinOption ? static_cast<const ReduceMinOption *>(option()) : nullptr;
  }
  const ReduceMaxOption *option_as_ReduceMaxOption() const {
    return option_type() == OpOption_ReduceMaxOption ? static_cast<const ReduceMaxOption *>(option()) : nullptr;
  }
  const ReduceMeanOption *option_as_ReduceMeanOption() const {
    return option_type() == OpOption_ReduceMeanOption ? static_cast<const ReduceMeanOption *>(option()) : nullptr;
  }
  const ReduceSumOption *option_as_ReduceSumOption() const {
    return option_type() == OpOption_ReduceSumOption ? static_cast<const ReduceSumOption *>(option()) : nullptr;
  }
  const ReduceMulOption *option_as_ReduceMulOption() const {
    return option_type() == OpOption_ReduceMulOption ? static_cast<const ReduceMulOption *>(option()) : nullptr;
  }
  const Pool2DOption *option_as_Pool2DOption() const {
    return option_type() == OpOption_Pool2DOption ? static_cast<const Pool2DOption *>(option()) : nullptr;
  }
  const Pool3DOption *option_as_Pool3DOption() const {
    return option_type() == OpOption_Pool3DOption ? static_cast<const Pool3DOption *>(option()) : nullptr;
  }
  const ReshapeOption *option_as_ReshapeOption() const {
    return option_type() == OpOption_ReshapeOption ? static_cast<const ReshapeOption *>(option()) : nullptr;
  }
  const SliceOption *option_as_SliceOption() const {
    return option_type() == OpOption_SliceOption ? static_cast<const SliceOption *>(option()) : nullptr;
  }
  const FlattenOption *option_as_FlattenOption() const {
    return option_type() == OpOption_FlattenOption ? static_cast<const FlattenOption *>(option()) : nullptr;
  }
  const PermuteOption *option_as_PermuteOption() const {
    return option_type() == OpOption_PermuteOption ? static_cast<const PermuteOption *>(option()) : nullptr;
  }
  const ArgMaxOption *option_as_ArgMaxOption() const {
    return option_type() == OpOption_ArgMaxOption ? static_cast<const ArgMaxOption *>(option()) : nullptr;
  }
  const BatchNormOption *option_as_BatchNormOption() const {
    return option_type() == OpOption_BatchNormOption ? static_cast<const BatchNormOption *>(option()) : nullptr;
  }
  const Conv2DOption *option_as_Conv2DOption() const {
    return option_type() == OpOption_Conv2DOption ? static_cast<const Conv2DOption *>(option()) : nullptr;
  }
  const Conv3DOption *option_as_Conv3DOption() const {
    return option_type() == OpOption_Conv3DOption ? static_cast<const Conv3DOption *>(option()) : nullptr;
  }
  const InnerProductOption *option_as_InnerProductOption() const {
    return option_type() == OpOption_InnerProductOption ? static_cast<const InnerProductOption *>(option()) : nullptr;
  }
  const LRNOption *option_as_LRNOption() const {
    return option_type() == OpOption_LRNOption ? static_cast<const LRNOption *>(option()) : nullptr;
  }
  const NormalizeOption *option_as_NormalizeOption() const {
    return option_type() == OpOption_NormalizeOption ? static_cast<const NormalizeOption *>(option()) : nullptr;
  }
  const PriorBoxOption *option_as_PriorBoxOption() const {
    return option_type() == OpOption_PriorBoxOption ? static_cast<const PriorBoxOption *>(option()) : nullptr;
  }
  const ProposalOption *option_as_ProposalOption() const {
    return option_type() == OpOption_ProposalOption ? static_cast<const ProposalOption *>(option()) : nullptr;
  }
  const ResizeOption *option_as_ResizeOption() const {
    return option_type() == OpOption_ResizeOption ? static_cast<const ResizeOption *>(option()) : nullptr;
  }
  const RoiPoolingOption *option_as_RoiPoolingOption() const {
    return option_type() == OpOption_RoiPoolingOption ? static_cast<const RoiPoolingOption *>(option()) : nullptr;
  }
  const ScaleOption *option_as_ScaleOption() const {
    return option_type() == OpOption_ScaleOption ? static_cast<const ScaleOption *>(option()) : nullptr;
  }
  const SoftmaxOption *option_as_SoftmaxOption() const {
    return option_type() == OpOption_SoftmaxOption ? static_cast<const SoftmaxOption *>(option()) : nullptr;
  }
  const InputOption *option_as_InputOption() const {
    return option_type() == OpOption_InputOption ? static_cast<const InputOption *>(option()) : nullptr;
  }
  OpType type() const {
    return static_cast<OpType>(GetField<int32_t>(14, 0));
  }
  const flatbuffers::String *desc() const {
    return GetPointer<const flatbuffers::String *>(16);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, 4) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, 6) &&
           verifier.VerifyVector(inputs()) &&
           VerifyOffset(verifier, 8) &&
           verifier.VerifyVector(outputs()) &&
           VerifyField<uint8_t>(verifier, 10) &&
           VerifyOffset(verifier, 12) &&
           VerifyOpOption(verifier, option(), option_type()) &&
           VerifyField<int32_t>(verifier, 14) &&
           VerifyOffset(verifier, 16) &&
           verifier.VerifyString(desc()) &&
           verifier.EndTable();
  }
  OpT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OpT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Op> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OpT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const DefaultOption *Op::option_as<DefaultOption>() const {
  return option_as_DefaultOption();
}

template<> inline const ConstOption *Op::option_as<ConstOption>() const {
  return option_as_ConstOption();
}

template<> inline const AbsOption *Op::option_as<AbsOption>() const {
  return option_as_AbsOption();
}

template<> inline const BoundedReluOption *Op::option_as<BoundedReluOption>() const {
  return option_as_BoundedReluOption();
}

template<> inline const ClipOption *Op::option_as<ClipOption>() const {
  return option_as_ClipOption();
}

template<> inline const ClipV2Option *Op::option_as<ClipV2Option>() const {
  return option_as_ClipV2Option();
}

template<> inline const ClippedReluOption *Op::option_as<ClippedReluOption>() const {
  return option_as_ClippedReluOption();
}

template<> inline const EluOption *Op::option_as<EluOption>() const {
  return option_as_EluOption();
}

template<> inline const ExpOption *Op::option_as<ExpOption>() const {
  return option_as_ExpOption();
}

template<> inline const GeluTanhOption *Op::option_as<GeluTanhOption>() const {
  return option_as_GeluTanhOption();
}

template<> inline const HardSigmoidOption *Op::option_as<HardSigmoidOption>() const {
  return option_as_HardSigmoidOption();
}

template<> inline const HardSwishOption *Op::option_as<HardSwishOption>() const {
  return option_as_HardSwishOption();
}

template<> inline const LeakyReluOption *Op::option_as<LeakyReluOption>() const {
  return option_as_LeakyReluOption();
}

template<> inline const LinearOption *Op::option_as<LinearOption>() const {
  return option_as_LinearOption();
}

template<> inline const LogOption *Op::option_as<LogOption>() const {
  return option_as_LogOption();
}

template<> inline const LogisticOption *Op::option_as<LogisticOption>() const {
  return option_as_LogisticOption();
}

template<> inline const LogSigmoidOption *Op::option_as<LogSigmoidOption>() const {
  return option_as_LogSigmoidOption();
}

template<> inline const MishOption *Op::option_as<MishOption>() const {
  return option_as_MishOption();
}

template<> inline const PowOption *Op::option_as<PowOption>() const {
  return option_as_PowOption();
}

template<> inline const PReluOption *Op::option_as<PReluOption>() const {
  return option_as_PReluOption();
}

template<> inline const ReluOption *Op::option_as<ReluOption>() const {
  return option_as_ReluOption();
}

template<> inline const Relu6Option *Op::option_as<Relu6Option>() const {
  return option_as_Relu6Option();
}

template<> inline const RoundOption *Op::option_as<RoundOption>() const {
  return option_as_RoundOption();
}

template<> inline const SeluOption *Op::option_as<SeluOption>() const {
  return option_as_SeluOption();
}

template<> inline const SigmoidOption *Op::option_as<SigmoidOption>() const {
  return option_as_SigmoidOption();
}

template<> inline const SoftReluOption *Op::option_as<SoftReluOption>() const {
  return option_as_SoftReluOption();
}

template<> inline const SoftReluV2Option *Op::option_as<SoftReluV2Option>() const {
  return option_as_SoftReluV2Option();
}

template<> inline const SqrtOption *Op::option_as<SqrtOption>() const {
  return option_as_SqrtOption();
}

template<> inline const SwishOption *Op::option_as<SwishOption>() const {
  return option_as_SwishOption();
}

template<> inline const TanhOption *Op::option_as<TanhOption>() const {
  return option_as_TanhOption();
}

template<> inline const AddOption *Op::option_as<AddOption>() const {
  return option_as_AddOption();
}

template<> inline const MulOption *Op::option_as<MulOption>() const {
  return option_as_MulOption();
}

template<> inline const MinOption *Op::option_as<MinOption>() const {
  return option_as_MinOption();
}

template<> inline const MaxOption *Op::option_as<MaxOption>() const {
  return option_as_MaxOption();
}

template<> inline const MeanOption *Op::option_as<MeanOption>() const {
  return option_as_MeanOption();
}

template<> inline const DivOption *Op::option_as<DivOption>() const {
  return option_as_DivOption();
}

template<> inline const GreaterEqualOption *Op::option_as<GreaterEqualOption>() const {
  return option_as_GreaterEqualOption();
}

template<> inline const GreaterThanOption *Op::option_as<GreaterThanOption>() const {
  return option_as_GreaterThanOption();
}

template<> inline const LessEqualOption *Op::option_as<LessEqualOption>() const {
  return option_as_LessEqualOption();
}

template<> inline const LessThanOption *Op::option_as<LessThanOption>() const {
  return option_as_LessThanOption();
}

template<> inline const EqualToOption *Op::option_as<EqualToOption>() const {
  return option_as_EqualToOption();
}

template<> inline const NotEqualOption *Op::option_as<NotEqualOption>() const {
  return option_as_NotEqualOption();
}

template<> inline const ReduceMinOption *Op::option_as<ReduceMinOption>() const {
  return option_as_ReduceMinOption();
}

template<> inline const ReduceMaxOption *Op::option_as<ReduceMaxOption>() const {
  return option_as_ReduceMaxOption();
}

template<> inline const ReduceMeanOption *Op::option_as<ReduceMeanOption>() const {
  return option_as_ReduceMeanOption();
}

template<> inline const ReduceSumOption *Op::option_as<ReduceSumOption>() const {
  return option_as_ReduceSumOption();
}

template<> inline const ReduceMulOption *Op::option_as<ReduceMulOption>() const {
  return option_as_ReduceMulOption();
}

template<> inline const Pool2DOption *Op::option_as<Pool2DOption>() const {
  return option_as_Pool2DOption();
}

template<> inline const Pool3DOption *Op::option_as<Pool3DOption>() const {
  return option_as_Pool3DOption();
}

template<> inline const ReshapeOption *Op::option_as<ReshapeOption>() const {
  return option_as_ReshapeOption();
}

template<> inline const SliceOption *Op::option_as<SliceOption>() const {
  return option_as_SliceOption();
}

template<> inline const FlattenOption *Op::option_as<FlattenOption>() const {
  return option_as_FlattenOption();
}

template<> inline const PermuteOption *Op::option_as<PermuteOption>() const {
  return option_as_PermuteOption();
}

template<> inline const ArgMaxOption *Op::option_as<ArgMaxOption>() const {
  return option_as_ArgMaxOption();
}

template<> inline const BatchNormOption *Op::option_as<BatchNormOption>() const {
  return option_as_BatchNormOption();
}

template<> inline const Conv2DOption *Op::option_as<Conv2DOption>() const {
  return option_as_Conv2DOption();
}

template<> inline const Conv3DOption *Op::option_as<Conv3DOption>() const {
  return option_as_Conv3DOption();
}

template<> inline const InnerProductOption *Op::option_as<InnerProductOption>() const {
  return option_as_InnerProductOption();
}

template<> inline const LRNOption *Op::option_as<LRNOption>() const {
  return option_as_LRNOption();
}

template<> inline const NormalizeOption *Op::option_as<NormalizeOption>() const {
  return option_as_NormalizeOption();
}

template<> inline const PriorBoxOption *Op::option_as<PriorBoxOption>() const {
  return option_as_PriorBoxOption();
}

template<> inline const ProposalOption *Op::option_as<ProposalOption>() const {
  return option_as_ProposalOption();
}

template<> inline const ResizeOption *Op::option_as<ResizeOption>() const {
  return option_as_ResizeOption();
}

template<> inline const RoiPoolingOption *Op::option_as<RoiPoolingOption>() const {
  return option_as_RoiPoolingOption();
}

template<> inline const ScaleOption *Op::option_as<ScaleOption>() const {
  return option_as_ScaleOption();
}

template<> inline const SoftmaxOption *Op::option_as<SoftmaxOption>() const {
  return option_as_SoftmaxOption();
}

template<> inline const InputOption *Op::option_as<InputOption>() const {
  return option_as_InputOption();
}

struct OpBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(4, name);
  }
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> inputs) {
    fbb_.AddOffset(6, inputs);
  }
  void add_outputs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> outputs) {
    fbb_.AddOffset(8, outputs);
  }
  void add_option_type(OpOption option_type) {
    fbb_.AddElement<uint8_t>(10, static_cast<uint8_t>(option_type), 0);
  }
  void add_option(flatbuffers::Offset<void> option) {
    fbb_.AddOffset(12, option);
  }
  void add_type(OpType type) {
    fbb_.AddElement<int32_t>(14, static_cast<int32_t>(type), 0);
  }
  void add_desc(flatbuffers::Offset<flatbuffers::String> desc) {
    fbb_.AddOffset(16, desc);
  }
  explicit OpBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OpBuilder &operator=(const OpBuilder &);
  flatbuffers::Offset<Op> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Op>(end);
    return o;
  }
};

inline flatbuffers::Offset<Op> CreateOp(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> inputs = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> outputs = 0,
    OpOption option_type = OpOption_NONE,
    flatbuffers::Offset<void> option = 0,
    OpType type = OpType_Default,
    flatbuffers::Offset<flatbuffers::String> desc = 0) {
  OpBuilder builder_(_fbb);
  builder_.add_desc(desc);
  builder_.add_type(type);
  builder_.add_option(option);
  builder_.add_outputs(outputs);
  builder_.add_inputs(inputs);
  builder_.add_name(name);
  builder_.add_option_type(option_type);
  return builder_.Finish();
}

flatbuffers::Offset<Op> CreateOp(flatbuffers::FlatBufferBuilder &_fbb, const OpT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline OpT *Op::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new OpT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Op::UnPackTo(OpT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = inputs(); if (_e) { _o->inputs.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->inputs[_i] = _e->Get(_i); } } };
  { auto _e = outputs(); if (_e) { _o->outputs.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->outputs[_i] = _e->Get(_i); } } };
  { auto _e = option_type(); _o->option.type = _e; };
  { auto _e = option(); if (_e) _o->option.value = OpOptionUnion::UnPack(_e, option_type(), _resolver); };
  { auto _e = type(); _o->type = _e; };
  { auto _e = desc(); if (_e) _o->desc = _e->str(); };
}

inline flatbuffers::Offset<Op> Op::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OpT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOp(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Op> CreateOp(flatbuffers::FlatBufferBuilder &_fbb, const OpT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OpT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _inputs = _o->inputs.size() ? _fbb.CreateVector(_o->inputs) : 0;
  auto _outputs = _o->outputs.size() ? _fbb.CreateVector(_o->outputs) : 0;
  auto _option_type = _o->option.type;
  auto _option = _o->option.Pack(_fbb);
  auto _type = _o->type;
  auto _desc = _o->desc.empty() ? 0 : _fbb.CreateString(_o->desc);
  return ace::CreateOp(
      _fbb,
      _name,
      _inputs,
      _outputs,
      _option_type,
      _option,
      _type,
      _desc);
}

inline const flatbuffers::TypeTable *OpTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    OpTypeTypeTable
  };
  static const char * const names[] = {
    "Default",
    "Const",
    "Abs",
    "BoundedRelu",
    "Clip",
    "ClipV2",
    "ClippedRelu",
    "Elu",
    "Exp",
    "GeluTanh",
    "HardSigmoid",
    "HardSwish",
    "LeakyRelu",
    "Linear",
    "Log",
    "Logistic",
    "LogSigmoid",
    "Mish",
    "Pow",
    "PRelu",
    "Relu",
    "Relu6",
    "Round",
    "Selu",
    "Sigmoid",
    "SoftRelu",
    "SoftReluV2",
    "Sqrt",
    "Swish",
    "Tanh",
    "Add",
    "Mul",
    "Min",
    "Max",
    "Mean",
    "Div",
    "GreaterEqual",
    "GreaterThan",
    "LessEqual",
    "LessThan",
    "EqualTo",
    "NotEqual",
    "ReduceMin",
    "ReduceMax",
    "ReduceMean",
    "ReduceSum",
    "ReduceMul",
    "Pool2D",
    "Pool3D",
    "Reshape",
    "Slice",
    "Flatten",
    "Permute",
    "ArgMax",
    "BatchNorm",
    "Conv2D",
    "Conv3D",
    "InnerProduct",
    "LRN",
    "Normalize",
    "PriorBox",
    "Proposal",
    "Resize",
    "RoiPooling",
    "Scale",
    "Softmax",
    "Input"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 67, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *OpTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_INT, 0, 1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    OpOptionTypeTable,
    OpTypeTypeTable
  };
  static const char * const names[] = {
    "name",
    "inputs",
    "outputs",
    "option_type",
    "option",
    "type",
    "desc"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace ace

#endif  // FLATBUFFERS_GENERATED_OP_ACE_H_
