// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OP_ACE_H_
#define FLATBUFFERS_GENERATED_OP_ACE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "op_option_generated.h"
#include "tensor_generated.h"
#include "types_generated.h"

namespace ace {

struct Op;
struct OpBuilder;
struct OpT;

inline const flatbuffers::TypeTable *OpTypeTable();

enum OpType : int32_t {
  OpType_Default = 0,
  OpType_Const = 1,
  OpType_Abs = 2,
  OpType_BoundedRelu = 3,
  OpType_Clip = 4,
  OpType_ClipV2 = 5,
  OpType_ClippedRelu = 6,
  OpType_Elu = 7,
  OpType_Exp = 8,
  OpType_GeluTanh = 9,
  OpType_HardSigmoid = 10,
  OpType_HardSwish = 11,
  OpType_LeakyRelu = 12,
  OpType_Linear = 13,
  OpType_Log = 14,
  OpType_Logistic = 15,
  OpType_LogSigmoid = 16,
  OpType_Mish = 17,
  OpType_Pow = 18,
  OpType_PRelu = 19,
  OpType_Relu = 20,
  OpType_Relu6 = 21,
  OpType_Round = 22,
  OpType_Selu = 23,
  OpType_Sigmoid = 24,
  OpType_SoftRelu = 25,
  OpType_SoftReluV2 = 26,
  OpType_Sqrt = 27,
  OpType_Swish = 28,
  OpType_Tanh = 29,
  OpType_Add = 30,
  OpType_Mul = 31,
  OpType_Min = 32,
  OpType_Max = 33,
  OpType_Mean = 34,
  OpType_Div = 35,
  OpType_GreaterEqual = 36,
  OpType_GreaterThan = 37,
  OpType_LessEqual = 38,
  OpType_LessThan = 39,
  OpType_EqualTo = 40,
  OpType_NotEqual = 41,
  OpType_ReduceMin = 42,
  OpType_ReduceMax = 43,
  OpType_ReduceMean = 44,
  OpType_ReduceSum = 45,
  OpType_ReduceMul = 46,
  OpType_Pool2D = 47,
  OpType_Pool3D = 48,
  OpType_Reshape = 49,
  OpType_Slice = 50,
  OpType_Flatten = 51,
  OpType_Permute = 52,
  OpType_ArgMax = 53,
  OpType_BatchNorm = 54,
  OpType_Conv2D = 55,
  OpType_Conv3D = 56,
  OpType_InnerProduct = 57,
  OpType_LRN = 58,
  OpType_Normalize = 59,
  OpType_PriorBox = 60,
  OpType_Proposal = 61,
  OpType_Resize = 62,
  OpType_RoiPooling = 63,
  OpType_Scale = 64,
  OpType_Softmax = 65,
  OpType_Input = 66,
  OpType_MIN = OpType_Default,
  OpType_MAX = OpType_Input
};

inline const OpType (&EnumValuesOpType())[67] {
  static const OpType values[] = {
    OpType_Default,
    OpType_Const,
    OpType_Abs,
    OpType_BoundedRelu,
    OpType_Clip,
    OpType_ClipV2,
    OpType_ClippedRelu,
    OpType_Elu,
    OpType_Exp,
    OpType_GeluTanh,
    OpType_HardSigmoid,
    OpType_HardSwish,
    OpType_LeakyRelu,
    OpType_Linear,
    OpType_Log,
    OpType_Logistic,
    OpType_LogSigmoid,
    OpType_Mish,
    OpType_Pow,
    OpType_PRelu,
    OpType_Relu,
    OpType_Relu6,
    OpType_Round,
    OpType_Selu,
    OpType_Sigmoid,
    OpType_SoftRelu,
    OpType_SoftReluV2,
    OpType_Sqrt,
    OpType_Swish,
    OpType_Tanh,
    OpType_Add,
    OpType_Mul,
    OpType_Min,
    OpType_Max,
    OpType_Mean,
    OpType_Div,
    OpType_GreaterEqual,
    OpType_GreaterThan,
    OpType_LessEqual,
    OpType_LessThan,
    OpType_EqualTo,
    OpType_NotEqual,
    OpType_ReduceMin,
    OpType_ReduceMax,
    OpType_ReduceMean,
    OpType_ReduceSum,
    OpType_ReduceMul,
    OpType_Pool2D,
    OpType_Pool3D,
    OpType_Reshape,
    OpType_Slice,
    OpType_Flatten,
    OpType_Permute,
    OpType_ArgMax,
    OpType_BatchNorm,
    OpType_Conv2D,
    OpType_Conv3D,
    OpType_InnerProduct,
    OpType_LRN,
    OpType_Normalize,
    OpType_PriorBox,
    OpType_Proposal,
    OpType_Resize,
    OpType_RoiPooling,
    OpType_Scale,
    OpType_Softmax,
    OpType_Input
  };
  return values;
}

inline const char * const *EnumNamesOpType() {
  static const char * const names[68] = {
    "Default",
    "Const",
    "Abs",
    "BoundedRelu",
    "Clip",
    "ClipV2",
    "ClippedRelu",
    "Elu",
    "Exp",
    "GeluTanh",
    "HardSigmoid",
    "HardSwish",
    "LeakyRelu",
    "Linear",
    "Log",
    "Logistic",
    "LogSigmoid",
    "Mish",
    "Pow",
    "PRelu",
    "Relu",
    "Relu6",
    "Round",
    "Selu",
    "Sigmoid",
    "SoftRelu",
    "SoftReluV2",
    "Sqrt",
    "Swish",
    "Tanh",
    "Add",
    "Mul",
    "Min",
    "Max",
    "Mean",
    "Div",
    "GreaterEqual",
    "GreaterThan",
    "LessEqual",
    "LessThan",
    "EqualTo",
    "NotEqual",
    "ReduceMin",
    "ReduceMax",
    "ReduceMean",
    "ReduceSum",
    "ReduceMul",
    "Pool2D",
    "Pool3D",
    "Reshape",
    "Slice",
    "Flatten",
    "Permute",
    "ArgMax",
    "BatchNorm",
    "Conv2D",
    "Conv3D",
    "InnerProduct",
    "LRN",
    "Normalize",
    "PriorBox",
    "Proposal",
    "Resize",
    "RoiPooling",
    "Scale",
    "Softmax",
    "Input",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpType(OpType e) {
  if (flatbuffers::IsOutRange(e, OpType_Default, OpType_Input)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOpType()[index];
}

struct OpT : public flatbuffers::NativeTable {
  typedef Op TableType;
  std::string name{};
  std::vector<int32_t> inputs{};
  std::vector<int32_t> outputs{};
  ace::OpOptionUnion option{};
  ace::OpType type = ace::OpType_Default;
  std::string desc{};
};

struct Op FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OpT NativeTableType;
  typedef OpBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return OpTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPTION_TYPE = 10,
    VT_OPTION = 12,
    VT_TYPE = 14,
    VT_DESC = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<int32_t> *inputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  ace::OpOption option_type() const {
    return static_cast<ace::OpOption>(GetField<uint8_t>(VT_OPTION_TYPE, 0));
  }
  const void *option() const {
    return GetPointer<const void *>(VT_OPTION);
  }
  template<typename T> const T *option_as() const;
  const ace::DefaultOption *option_as_DefaultOption() const {
    return option_type() == ace::OpOption_DefaultOption ? static_cast<const ace::DefaultOption *>(option()) : nullptr;
  }
  const ace::ConstOption *option_as_ConstOption() const {
    return option_type() == ace::OpOption_ConstOption ? static_cast<const ace::ConstOption *>(option()) : nullptr;
  }
  const ace::AbsOption *option_as_AbsOption() const {
    return option_type() == ace::OpOption_AbsOption ? static_cast<const ace::AbsOption *>(option()) : nullptr;
  }
  const ace::BoundedReluOption *option_as_BoundedReluOption() const {
    return option_type() == ace::OpOption_BoundedReluOption ? static_cast<const ace::BoundedReluOption *>(option()) : nullptr;
  }
  const ace::ClipOption *option_as_ClipOption() const {
    return option_type() == ace::OpOption_ClipOption ? static_cast<const ace::ClipOption *>(option()) : nullptr;
  }
  const ace::ClipV2Option *option_as_ClipV2Option() const {
    return option_type() == ace::OpOption_ClipV2Option ? static_cast<const ace::ClipV2Option *>(option()) : nullptr;
  }
  const ace::ClippedReluOption *option_as_ClippedReluOption() const {
    return option_type() == ace::OpOption_ClippedReluOption ? static_cast<const ace::ClippedReluOption *>(option()) : nullptr;
  }
  const ace::EluOption *option_as_EluOption() const {
    return option_type() == ace::OpOption_EluOption ? static_cast<const ace::EluOption *>(option()) : nullptr;
  }
  const ace::ExpOption *option_as_ExpOption() const {
    return option_type() == ace::OpOption_ExpOption ? static_cast<const ace::ExpOption *>(option()) : nullptr;
  }
  const ace::GeluTanhOption *option_as_GeluTanhOption() const {
    return option_type() == ace::OpOption_GeluTanhOption ? static_cast<const ace::GeluTanhOption *>(option()) : nullptr;
  }
  const ace::HardSigmoidOption *option_as_HardSigmoidOption() const {
    return option_type() == ace::OpOption_HardSigmoidOption ? static_cast<const ace::HardSigmoidOption *>(option()) : nullptr;
  }
  const ace::HardSwishOption *option_as_HardSwishOption() const {
    return option_type() == ace::OpOption_HardSwishOption ? static_cast<const ace::HardSwishOption *>(option()) : nullptr;
  }
  const ace::LeakyReluOption *option_as_LeakyReluOption() const {
    return option_type() == ace::OpOption_LeakyReluOption ? static_cast<const ace::LeakyReluOption *>(option()) : nullptr;
  }
  const ace::LinearOption *option_as_LinearOption() const {
    return option_type() == ace::OpOption_LinearOption ? static_cast<const ace::LinearOption *>(option()) : nullptr;
  }
  const ace::LogOption *option_as_LogOption() const {
    return option_type() == ace::OpOption_LogOption ? static_cast<const ace::LogOption *>(option()) : nullptr;
  }
  const ace::LogisticOption *option_as_LogisticOption() const {
    return option_type() == ace::OpOption_LogisticOption ? static_cast<const ace::LogisticOption *>(option()) : nullptr;
  }
  const ace::LogSigmoidOption *option_as_LogSigmoidOption() const {
    return option_type() == ace::OpOption_LogSigmoidOption ? static_cast<const ace::LogSigmoidOption *>(option()) : nullptr;
  }
  const ace::MishOption *option_as_MishOption() const {
    return option_type() == ace::OpOption_MishOption ? static_cast<const ace::MishOption *>(option()) : nullptr;
  }
  const ace::PowOption *option_as_PowOption() const {
    return option_type() == ace::OpOption_PowOption ? static_cast<const ace::PowOption *>(option()) : nullptr;
  }
  const ace::PReluOption *option_as_PReluOption() const {
    return option_type() == ace::OpOption_PReluOption ? static_cast<const ace::PReluOption *>(option()) : nullptr;
  }
  const ace::ReluOption *option_as_ReluOption() const {
    return option_type() == ace::OpOption_ReluOption ? static_cast<const ace::ReluOption *>(option()) : nullptr;
  }
  const ace::Relu6Option *option_as_Relu6Option() const {
    return option_type() == ace::OpOption_Relu6Option ? static_cast<const ace::Relu6Option *>(option()) : nullptr;
  }
  const ace::RoundOption *option_as_RoundOption() const {
    return option_type() == ace::OpOption_RoundOption ? static_cast<const ace::RoundOption *>(option()) : nullptr;
  }
  const ace::SeluOption *option_as_SeluOption() const {
    return option_type() == ace::OpOption_SeluOption ? static_cast<const ace::SeluOption *>(option()) : nullptr;
  }
  const ace::SigmoidOption *option_as_SigmoidOption() const {
    return option_type() == ace::OpOption_SigmoidOption ? static_cast<const ace::SigmoidOption *>(option()) : nullptr;
  }
  const ace::SoftReluOption *option_as_SoftReluOption() const {
    return option_type() == ace::OpOption_SoftReluOption ? static_cast<const ace::SoftReluOption *>(option()) : nullptr;
  }
  const ace::SoftReluV2Option *option_as_SoftReluV2Option() const {
    return option_type() == ace::OpOption_SoftReluV2Option ? static_cast<const ace::SoftReluV2Option *>(option()) : nullptr;
  }
  const ace::SqrtOption *option_as_SqrtOption() const {
    return option_type() == ace::OpOption_SqrtOption ? static_cast<const ace::SqrtOption *>(option()) : nullptr;
  }
  const ace::SwishOption *option_as_SwishOption() const {
    return option_type() == ace::OpOption_SwishOption ? static_cast<const ace::SwishOption *>(option()) : nullptr;
  }
  const ace::TanhOption *option_as_TanhOption() const {
    return option_type() == ace::OpOption_TanhOption ? static_cast<const ace::TanhOption *>(option()) : nullptr;
  }
  const ace::AddOption *option_as_AddOption() const {
    return option_type() == ace::OpOption_AddOption ? static_cast<const ace::AddOption *>(option()) : nullptr;
  }
  const ace::MulOption *option_as_MulOption() const {
    return option_type() == ace::OpOption_MulOption ? static_cast<const ace::MulOption *>(option()) : nullptr;
  }
  const ace::MinOption *option_as_MinOption() const {
    return option_type() == ace::OpOption_MinOption ? static_cast<const ace::MinOption *>(option()) : nullptr;
  }
  const ace::MaxOption *option_as_MaxOption() const {
    return option_type() == ace::OpOption_MaxOption ? static_cast<const ace::MaxOption *>(option()) : nullptr;
  }
  const ace::MeanOption *option_as_MeanOption() const {
    return option_type() == ace::OpOption_MeanOption ? static_cast<const ace::MeanOption *>(option()) : nullptr;
  }
  const ace::DivOption *option_as_DivOption() const {
    return option_type() == ace::OpOption_DivOption ? static_cast<const ace::DivOption *>(option()) : nullptr;
  }
  const ace::GreaterEqualOption *option_as_GreaterEqualOption() const {
    return option_type() == ace::OpOption_GreaterEqualOption ? static_cast<const ace::GreaterEqualOption *>(option()) : nullptr;
  }
  const ace::GreaterThanOption *option_as_GreaterThanOption() const {
    return option_type() == ace::OpOption_GreaterThanOption ? static_cast<const ace::GreaterThanOption *>(option()) : nullptr;
  }
  const ace::LessEqualOption *option_as_LessEqualOption() const {
    return option_type() == ace::OpOption_LessEqualOption ? static_cast<const ace::LessEqualOption *>(option()) : nullptr;
  }
  const ace::LessThanOption *option_as_LessThanOption() const {
    return option_type() == ace::OpOption_LessThanOption ? static_cast<const ace::LessThanOption *>(option()) : nullptr;
  }
  const ace::EqualToOption *option_as_EqualToOption() const {
    return option_type() == ace::OpOption_EqualToOption ? static_cast<const ace::EqualToOption *>(option()) : nullptr;
  }
  const ace::NotEqualOption *option_as_NotEqualOption() const {
    return option_type() == ace::OpOption_NotEqualOption ? static_cast<const ace::NotEqualOption *>(option()) : nullptr;
  }
  const ace::ReduceMinOption *option_as_ReduceMinOption() const {
    return option_type() == ace::OpOption_ReduceMinOption ? static_cast<const ace::ReduceMinOption *>(option()) : nullptr;
  }
  const ace::ReduceMaxOption *option_as_ReduceMaxOption() const {
    return option_type() == ace::OpOption_ReduceMaxOption ? static_cast<const ace::ReduceMaxOption *>(option()) : nullptr;
  }
  const ace::ReduceMeanOption *option_as_ReduceMeanOption() const {
    return option_type() == ace::OpOption_ReduceMeanOption ? static_cast<const ace::ReduceMeanOption *>(option()) : nullptr;
  }
  const ace::ReduceSumOption *option_as_ReduceSumOption() const {
    return option_type() == ace::OpOption_ReduceSumOption ? static_cast<const ace::ReduceSumOption *>(option()) : nullptr;
  }
  const ace::ReduceMulOption *option_as_ReduceMulOption() const {
    return option_type() == ace::OpOption_ReduceMulOption ? static_cast<const ace::ReduceMulOption *>(option()) : nullptr;
  }
  const ace::Pool2DOption *option_as_Pool2DOption() const {
    return option_type() == ace::OpOption_Pool2DOption ? static_cast<const ace::Pool2DOption *>(option()) : nullptr;
  }
  const ace::Pool3DOption *option_as_Pool3DOption() const {
    return option_type() == ace::OpOption_Pool3DOption ? static_cast<const ace::Pool3DOption *>(option()) : nullptr;
  }
  const ace::ReshapeOption *option_as_ReshapeOption() const {
    return option_type() == ace::OpOption_ReshapeOption ? static_cast<const ace::ReshapeOption *>(option()) : nullptr;
  }
  const ace::SliceOption *option_as_SliceOption() const {
    return option_type() == ace::OpOption_SliceOption ? static_cast<const ace::SliceOption *>(option()) : nullptr;
  }
  const ace::FlattenOption *option_as_FlattenOption() const {
    return option_type() == ace::OpOption_FlattenOption ? static_cast<const ace::FlattenOption *>(option()) : nullptr;
  }
  const ace::PermuteOption *option_as_PermuteOption() const {
    return option_type() == ace::OpOption_PermuteOption ? static_cast<const ace::PermuteOption *>(option()) : nullptr;
  }
  const ace::ArgMaxOption *option_as_ArgMaxOption() const {
    return option_type() == ace::OpOption_ArgMaxOption ? static_cast<const ace::ArgMaxOption *>(option()) : nullptr;
  }
  const ace::BatchNormOption *option_as_BatchNormOption() const {
    return option_type() == ace::OpOption_BatchNormOption ? static_cast<const ace::BatchNormOption *>(option()) : nullptr;
  }
  const ace::Conv2DOption *option_as_Conv2DOption() const {
    return option_type() == ace::OpOption_Conv2DOption ? static_cast<const ace::Conv2DOption *>(option()) : nullptr;
  }
  const ace::Conv3DOption *option_as_Conv3DOption() const {
    return option_type() == ace::OpOption_Conv3DOption ? static_cast<const ace::Conv3DOption *>(option()) : nullptr;
  }
  const ace::InnerProductOption *option_as_InnerProductOption() const {
    return option_type() == ace::OpOption_InnerProductOption ? static_cast<const ace::InnerProductOption *>(option()) : nullptr;
  }
  const ace::LRNOption *option_as_LRNOption() const {
    return option_type() == ace::OpOption_LRNOption ? static_cast<const ace::LRNOption *>(option()) : nullptr;
  }
  const ace::NormalizeOption *option_as_NormalizeOption() const {
    return option_type() == ace::OpOption_NormalizeOption ? static_cast<const ace::NormalizeOption *>(option()) : nullptr;
  }
  const ace::PriorBoxOption *option_as_PriorBoxOption() const {
    return option_type() == ace::OpOption_PriorBoxOption ? static_cast<const ace::PriorBoxOption *>(option()) : nullptr;
  }
  const ace::ProposalOption *option_as_ProposalOption() const {
    return option_type() == ace::OpOption_ProposalOption ? static_cast<const ace::ProposalOption *>(option()) : nullptr;
  }
  const ace::ResizeOption *option_as_ResizeOption() const {
    return option_type() == ace::OpOption_ResizeOption ? static_cast<const ace::ResizeOption *>(option()) : nullptr;
  }
  const ace::RoiPoolingOption *option_as_RoiPoolingOption() const {
    return option_type() == ace::OpOption_RoiPoolingOption ? static_cast<const ace::RoiPoolingOption *>(option()) : nullptr;
  }
  const ace::ScaleOption *option_as_ScaleOption() const {
    return option_type() == ace::OpOption_ScaleOption ? static_cast<const ace::ScaleOption *>(option()) : nullptr;
  }
  const ace::SoftmaxOption *option_as_SoftmaxOption() const {
    return option_type() == ace::OpOption_SoftmaxOption ? static_cast<const ace::SoftmaxOption *>(option()) : nullptr;
  }
  const ace::InputOption *option_as_InputOption() const {
    return option_type() == ace::OpOption_InputOption ? static_cast<const ace::InputOption *>(option()) : nullptr;
  }
  ace::OpType type() const {
    return static_cast<ace::OpType>(GetField<int32_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *desc() const {
    return GetPointer<const flatbuffers::String *>(VT_DESC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyVector(inputs()) &&
           VerifyOffset(verifier, VT_OUTPUTS) &&
           verifier.VerifyVector(outputs()) &&
           VerifyField<uint8_t>(verifier, VT_OPTION_TYPE, 1) &&
           VerifyOffset(verifier, VT_OPTION) &&
           VerifyOpOption(verifier, option(), option_type()) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(desc()) &&
           verifier.EndTable();
  }
  OpT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OpT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Op> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OpT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const ace::DefaultOption *Op::option_as<ace::DefaultOption>() const {
  return option_as_DefaultOption();
}

template<> inline const ace::ConstOption *Op::option_as<ace::ConstOption>() const {
  return option_as_ConstOption();
}

template<> inline const ace::AbsOption *Op::option_as<ace::AbsOption>() const {
  return option_as_AbsOption();
}

template<> inline const ace::BoundedReluOption *Op::option_as<ace::BoundedReluOption>() const {
  return option_as_BoundedReluOption();
}

template<> inline const ace::ClipOption *Op::option_as<ace::ClipOption>() const {
  return option_as_ClipOption();
}

template<> inline const ace::ClipV2Option *Op::option_as<ace::ClipV2Option>() const {
  return option_as_ClipV2Option();
}

template<> inline const ace::ClippedReluOption *Op::option_as<ace::ClippedReluOption>() const {
  return option_as_ClippedReluOption();
}

template<> inline const ace::EluOption *Op::option_as<ace::EluOption>() const {
  return option_as_EluOption();
}

template<> inline const ace::ExpOption *Op::option_as<ace::ExpOption>() const {
  return option_as_ExpOption();
}

template<> inline const ace::GeluTanhOption *Op::option_as<ace::GeluTanhOption>() const {
  return option_as_GeluTanhOption();
}

template<> inline const ace::HardSigmoidOption *Op::option_as<ace::HardSigmoidOption>() const {
  return option_as_HardSigmoidOption();
}

template<> inline const ace::HardSwishOption *Op::option_as<ace::HardSwishOption>() const {
  return option_as_HardSwishOption();
}

template<> inline const ace::LeakyReluOption *Op::option_as<ace::LeakyReluOption>() const {
  return option_as_LeakyReluOption();
}

template<> inline const ace::LinearOption *Op::option_as<ace::LinearOption>() const {
  return option_as_LinearOption();
}

template<> inline const ace::LogOption *Op::option_as<ace::LogOption>() const {
  return option_as_LogOption();
}

template<> inline const ace::LogisticOption *Op::option_as<ace::LogisticOption>() const {
  return option_as_LogisticOption();
}

template<> inline const ace::LogSigmoidOption *Op::option_as<ace::LogSigmoidOption>() const {
  return option_as_LogSigmoidOption();
}

template<> inline const ace::MishOption *Op::option_as<ace::MishOption>() const {
  return option_as_MishOption();
}

template<> inline const ace::PowOption *Op::option_as<ace::PowOption>() const {
  return option_as_PowOption();
}

template<> inline const ace::PReluOption *Op::option_as<ace::PReluOption>() const {
  return option_as_PReluOption();
}

template<> inline const ace::ReluOption *Op::option_as<ace::ReluOption>() const {
  return option_as_ReluOption();
}

template<> inline const ace::Relu6Option *Op::option_as<ace::Relu6Option>() const {
  return option_as_Relu6Option();
}

template<> inline const ace::RoundOption *Op::option_as<ace::RoundOption>() const {
  return option_as_RoundOption();
}

template<> inline const ace::SeluOption *Op::option_as<ace::SeluOption>() const {
  return option_as_SeluOption();
}

template<> inline const ace::SigmoidOption *Op::option_as<ace::SigmoidOption>() const {
  return option_as_SigmoidOption();
}

template<> inline const ace::SoftReluOption *Op::option_as<ace::SoftReluOption>() const {
  return option_as_SoftReluOption();
}

template<> inline const ace::SoftReluV2Option *Op::option_as<ace::SoftReluV2Option>() const {
  return option_as_SoftReluV2Option();
}

template<> inline const ace::SqrtOption *Op::option_as<ace::SqrtOption>() const {
  return option_as_SqrtOption();
}

template<> inline const ace::SwishOption *Op::option_as<ace::SwishOption>() const {
  return option_as_SwishOption();
}

template<> inline const ace::TanhOption *Op::option_as<ace::TanhOption>() const {
  return option_as_TanhOption();
}

template<> inline const ace::AddOption *Op::option_as<ace::AddOption>() const {
  return option_as_AddOption();
}

template<> inline const ace::MulOption *Op::option_as<ace::MulOption>() const {
  return option_as_MulOption();
}

template<> inline const ace::MinOption *Op::option_as<ace::MinOption>() const {
  return option_as_MinOption();
}

template<> inline const ace::MaxOption *Op::option_as<ace::MaxOption>() const {
  return option_as_MaxOption();
}

template<> inline const ace::MeanOption *Op::option_as<ace::MeanOption>() const {
  return option_as_MeanOption();
}

template<> inline const ace::DivOption *Op::option_as<ace::DivOption>() const {
  return option_as_DivOption();
}

template<> inline const ace::GreaterEqualOption *Op::option_as<ace::GreaterEqualOption>() const {
  return option_as_GreaterEqualOption();
}

template<> inline const ace::GreaterThanOption *Op::option_as<ace::GreaterThanOption>() const {
  return option_as_GreaterThanOption();
}

template<> inline const ace::LessEqualOption *Op::option_as<ace::LessEqualOption>() const {
  return option_as_LessEqualOption();
}

template<> inline const ace::LessThanOption *Op::option_as<ace::LessThanOption>() const {
  return option_as_LessThanOption();
}

template<> inline const ace::EqualToOption *Op::option_as<ace::EqualToOption>() const {
  return option_as_EqualToOption();
}

template<> inline const ace::NotEqualOption *Op::option_as<ace::NotEqualOption>() const {
  return option_as_NotEqualOption();
}

template<> inline const ace::ReduceMinOption *Op::option_as<ace::ReduceMinOption>() const {
  return option_as_ReduceMinOption();
}

template<> inline const ace::ReduceMaxOption *Op::option_as<ace::ReduceMaxOption>() const {
  return option_as_ReduceMaxOption();
}

template<> inline const ace::ReduceMeanOption *Op::option_as<ace::ReduceMeanOption>() const {
  return option_as_ReduceMeanOption();
}

template<> inline const ace::ReduceSumOption *Op::option_as<ace::ReduceSumOption>() const {
  return option_as_ReduceSumOption();
}

template<> inline const ace::ReduceMulOption *Op::option_as<ace::ReduceMulOption>() const {
  return option_as_ReduceMulOption();
}

template<> inline const ace::Pool2DOption *Op::option_as<ace::Pool2DOption>() const {
  return option_as_Pool2DOption();
}

template<> inline const ace::Pool3DOption *Op::option_as<ace::Pool3DOption>() const {
  return option_as_Pool3DOption();
}

template<> inline const ace::ReshapeOption *Op::option_as<ace::ReshapeOption>() const {
  return option_as_ReshapeOption();
}

template<> inline const ace::SliceOption *Op::option_as<ace::SliceOption>() const {
  return option_as_SliceOption();
}

template<> inline const ace::FlattenOption *Op::option_as<ace::FlattenOption>() const {
  return option_as_FlattenOption();
}

template<> inline const ace::PermuteOption *Op::option_as<ace::PermuteOption>() const {
  return option_as_PermuteOption();
}

template<> inline const ace::ArgMaxOption *Op::option_as<ace::ArgMaxOption>() const {
  return option_as_ArgMaxOption();
}

template<> inline const ace::BatchNormOption *Op::option_as<ace::BatchNormOption>() const {
  return option_as_BatchNormOption();
}

template<> inline const ace::Conv2DOption *Op::option_as<ace::Conv2DOption>() const {
  return option_as_Conv2DOption();
}

template<> inline const ace::Conv3DOption *Op::option_as<ace::Conv3DOption>() const {
  return option_as_Conv3DOption();
}

template<> inline const ace::InnerProductOption *Op::option_as<ace::InnerProductOption>() const {
  return option_as_InnerProductOption();
}

template<> inline const ace::LRNOption *Op::option_as<ace::LRNOption>() const {
  return option_as_LRNOption();
}

template<> inline const ace::NormalizeOption *Op::option_as<ace::NormalizeOption>() const {
  return option_as_NormalizeOption();
}

template<> inline const ace::PriorBoxOption *Op::option_as<ace::PriorBoxOption>() const {
  return option_as_PriorBoxOption();
}

template<> inline const ace::ProposalOption *Op::option_as<ace::ProposalOption>() const {
  return option_as_ProposalOption();
}

template<> inline const ace::ResizeOption *Op::option_as<ace::ResizeOption>() const {
  return option_as_ResizeOption();
}

template<> inline const ace::RoiPoolingOption *Op::option_as<ace::RoiPoolingOption>() const {
  return option_as_RoiPoolingOption();
}

template<> inline const ace::ScaleOption *Op::option_as<ace::ScaleOption>() const {
  return option_as_ScaleOption();
}

template<> inline const ace::SoftmaxOption *Op::option_as<ace::SoftmaxOption>() const {
  return option_as_SoftmaxOption();
}

template<> inline const ace::InputOption *Op::option_as<ace::InputOption>() const {
  return option_as_InputOption();
}

struct OpBuilder {
  typedef Op Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Op::VT_NAME, name);
  }
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> inputs) {
    fbb_.AddOffset(Op::VT_INPUTS, inputs);
  }
  void add_outputs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> outputs) {
    fbb_.AddOffset(Op::VT_OUTPUTS, outputs);
  }
  void add_option_type(ace::OpOption option_type) {
    fbb_.AddElement<uint8_t>(Op::VT_OPTION_TYPE, static_cast<uint8_t>(option_type), 0);
  }
  void add_option(flatbuffers::Offset<void> option) {
    fbb_.AddOffset(Op::VT_OPTION, option);
  }
  void add_type(ace::OpType type) {
    fbb_.AddElement<int32_t>(Op::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_desc(flatbuffers::Offset<flatbuffers::String> desc) {
    fbb_.AddOffset(Op::VT_DESC, desc);
  }
  explicit OpBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Op> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Op>(end);
    return o;
  }
};

inline flatbuffers::Offset<Op> CreateOp(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> inputs = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> outputs = 0,
    ace::OpOption option_type = ace::OpOption_NONE,
    flatbuffers::Offset<void> option = 0,
    ace::OpType type = ace::OpType_Default,
    flatbuffers::Offset<flatbuffers::String> desc = 0) {
  OpBuilder builder_(_fbb);
  builder_.add_desc(desc);
  builder_.add_type(type);
  builder_.add_option(option);
  builder_.add_outputs(outputs);
  builder_.add_inputs(inputs);
  builder_.add_name(name);
  builder_.add_option_type(option_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Op> CreateOpDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<int32_t> *inputs = nullptr,
    const std::vector<int32_t> *outputs = nullptr,
    ace::OpOption option_type = ace::OpOption_NONE,
    flatbuffers::Offset<void> option = 0,
    ace::OpType type = ace::OpType_Default,
    const char *desc = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto inputs__ = inputs ? _fbb.CreateVector<int32_t>(*inputs) : 0;
  auto outputs__ = outputs ? _fbb.CreateVector<int32_t>(*outputs) : 0;
  auto desc__ = desc ? _fbb.CreateString(desc) : 0;
  return ace::CreateOp(
      _fbb,
      name__,
      inputs__,
      outputs__,
      option_type,
      option,
      type,
      desc__);
}

flatbuffers::Offset<Op> CreateOp(flatbuffers::FlatBufferBuilder &_fbb, const OpT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline OpT *Op::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OpT>(new OpT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Op::UnPackTo(OpT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = inputs(); if (_e) { _o->inputs.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->inputs[_i] = _e->Get(_i); } } }
  { auto _e = outputs(); if (_e) { _o->outputs.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->outputs[_i] = _e->Get(_i); } } }
  { auto _e = option_type(); _o->option.type = _e; }
  { auto _e = option(); if (_e) _o->option.value = ace::OpOptionUnion::UnPack(_e, option_type(), _resolver); }
  { auto _e = type(); _o->type = _e; }
  { auto _e = desc(); if (_e) _o->desc = _e->str(); }
}

inline flatbuffers::Offset<Op> Op::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OpT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOp(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Op> CreateOp(flatbuffers::FlatBufferBuilder &_fbb, const OpT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OpT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _inputs = _o->inputs.size() ? _fbb.CreateVector(_o->inputs) : 0;
  auto _outputs = _o->outputs.size() ? _fbb.CreateVector(_o->outputs) : 0;
  auto _option_type = _o->option.type;
  auto _option = _o->option.Pack(_fbb);
  auto _type = _o->type;
  auto _desc = _o->desc.empty() ? 0 : _fbb.CreateString(_o->desc);
  return ace::CreateOp(
      _fbb,
      _name,
      _inputs,
      _outputs,
      _option_type,
      _option,
      _type,
      _desc);
}

inline const flatbuffers::TypeTable *OpTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ace::OpTypeTypeTable
  };
  static const char * const names[] = {
    "Default",
    "Const",
    "Abs",
    "BoundedRelu",
    "Clip",
    "ClipV2",
    "ClippedRelu",
    "Elu",
    "Exp",
    "GeluTanh",
    "HardSigmoid",
    "HardSwish",
    "LeakyRelu",
    "Linear",
    "Log",
    "Logistic",
    "LogSigmoid",
    "Mish",
    "Pow",
    "PRelu",
    "Relu",
    "Relu6",
    "Round",
    "Selu",
    "Sigmoid",
    "SoftRelu",
    "SoftReluV2",
    "Sqrt",
    "Swish",
    "Tanh",
    "Add",
    "Mul",
    "Min",
    "Max",
    "Mean",
    "Div",
    "GreaterEqual",
    "GreaterThan",
    "LessEqual",
    "LessThan",
    "EqualTo",
    "NotEqual",
    "ReduceMin",
    "ReduceMax",
    "ReduceMean",
    "ReduceSum",
    "ReduceMul",
    "Pool2D",
    "Pool3D",
    "Reshape",
    "Slice",
    "Flatten",
    "Permute",
    "ArgMax",
    "BatchNorm",
    "Conv2D",
    "Conv3D",
    "InnerProduct",
    "LRN",
    "Normalize",
    "PriorBox",
    "Proposal",
    "Resize",
    "RoiPooling",
    "Scale",
    "Softmax",
    "Input"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 67, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *OpTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_INT, 0, 1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ace::OpOptionTypeTable,
    ace::OpTypeTypeTable
  };
  static const char * const names[] = {
    "name",
    "inputs",
    "outputs",
    "option_type",
    "option",
    "type",
    "desc"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace ace

#endif  // FLATBUFFERS_GENERATED_OP_ACE_H_
