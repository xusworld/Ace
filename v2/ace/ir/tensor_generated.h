// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TENSOR_ACE_H_
#define FLATBUFFERS_GENERATED_TENSOR_ACE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

#include "types_generated.h"

namespace ace {

struct CacheDataProto;
struct CacheDataProtoBuilder;
struct CacheDataProtoT;

struct TensorShapeProto;
struct TensorShapeProtoBuilder;
struct TensorShapeProtoT;

struct TensorProto;
struct TensorProtoBuilder;
struct TensorProtoT;

struct ListValue;
struct ListValueBuilder;
struct ListValueT;

struct Attribute;
struct AttributeBuilder;
struct AttributeT;

struct NamedAttrList;
struct NamedAttrListBuilder;
struct NamedAttrListT;

inline const flatbuffers::TypeTable *CacheDataProtoTypeTable();

inline const flatbuffers::TypeTable *TensorShapeProtoTypeTable();

inline const flatbuffers::TypeTable *TensorProtoTypeTable();

inline const flatbuffers::TypeTable *ListValueTypeTable();

inline const flatbuffers::TypeTable *AttributeTypeTable();

inline const flatbuffers::TypeTable *NamedAttrListTypeTable();

struct CacheDataProtoT : public flatbuffers::NativeTable {
  typedef CacheDataProto TableType;
  std::vector<uint8_t> u{};
  std::vector<int8_t> c{};
  std::vector<std::string> s{};
  std::vector<int32_t> i{};
  std::vector<int64_t> l{};
  std::vector<float> f{};
  int64_t size = 0;
};

struct CacheDataProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CacheDataProtoT NativeTableType;
  typedef CacheDataProtoBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CacheDataProtoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_U = 4,
    VT_C = 6,
    VT_S = 8,
    VT_I = 10,
    VT_L = 12,
    VT_F = 14,
    VT_SIZE = 16
  };
  const flatbuffers::Vector<uint8_t> *u() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_U);
  }
  const flatbuffers::Vector<int8_t> *c() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_C);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *s() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_S);
  }
  const flatbuffers::Vector<int32_t> *i() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_I);
  }
  const flatbuffers::Vector<int64_t> *l() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_L);
  }
  const flatbuffers::Vector<float> *f() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_F);
  }
  int64_t size() const {
    return GetField<int64_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_U) &&
           verifier.VerifyVector(u()) &&
           VerifyOffset(verifier, VT_C) &&
           verifier.VerifyVector(c()) &&
           VerifyOffset(verifier, VT_S) &&
           verifier.VerifyVector(s()) &&
           verifier.VerifyVectorOfStrings(s()) &&
           VerifyOffset(verifier, VT_I) &&
           verifier.VerifyVector(i()) &&
           VerifyOffset(verifier, VT_L) &&
           verifier.VerifyVector(l()) &&
           VerifyOffset(verifier, VT_F) &&
           verifier.VerifyVector(f()) &&
           VerifyField<int64_t>(verifier, VT_SIZE, 8) &&
           verifier.EndTable();
  }
  CacheDataProtoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CacheDataProtoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CacheDataProto> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataProtoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CacheDataProtoBuilder {
  typedef CacheDataProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_u(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> u) {
    fbb_.AddOffset(CacheDataProto::VT_U, u);
  }
  void add_c(flatbuffers::Offset<flatbuffers::Vector<int8_t>> c) {
    fbb_.AddOffset(CacheDataProto::VT_C, c);
  }
  void add_s(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s) {
    fbb_.AddOffset(CacheDataProto::VT_S, s);
  }
  void add_i(flatbuffers::Offset<flatbuffers::Vector<int32_t>> i) {
    fbb_.AddOffset(CacheDataProto::VT_I, i);
  }
  void add_l(flatbuffers::Offset<flatbuffers::Vector<int64_t>> l) {
    fbb_.AddOffset(CacheDataProto::VT_L, l);
  }
  void add_f(flatbuffers::Offset<flatbuffers::Vector<float>> f) {
    fbb_.AddOffset(CacheDataProto::VT_F, f);
  }
  void add_size(int64_t size) {
    fbb_.AddElement<int64_t>(CacheDataProto::VT_SIZE, size, 0);
  }
  explicit CacheDataProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CacheDataProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CacheDataProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<CacheDataProto> CreateCacheDataProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> u = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> c = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> i = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> l = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> f = 0,
    int64_t size = 0) {
  CacheDataProtoBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_f(f);
  builder_.add_l(l);
  builder_.add_i(i);
  builder_.add_s(s);
  builder_.add_c(c);
  builder_.add_u(u);
  return builder_.Finish();
}

inline flatbuffers::Offset<CacheDataProto> CreateCacheDataProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *u = nullptr,
    const std::vector<int8_t> *c = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *s = nullptr,
    const std::vector<int32_t> *i = nullptr,
    const std::vector<int64_t> *l = nullptr,
    const std::vector<float> *f = nullptr,
    int64_t size = 0) {
  auto u__ = u ? _fbb.CreateVector<uint8_t>(*u) : 0;
  auto c__ = c ? _fbb.CreateVector<int8_t>(*c) : 0;
  auto s__ = s ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*s) : 0;
  auto i__ = i ? _fbb.CreateVector<int32_t>(*i) : 0;
  auto l__ = l ? _fbb.CreateVector<int64_t>(*l) : 0;
  auto f__ = f ? _fbb.CreateVector<float>(*f) : 0;
  return ace::CreateCacheDataProto(
      _fbb,
      u__,
      c__,
      s__,
      i__,
      l__,
      f__,
      size);
}

flatbuffers::Offset<CacheDataProto> CreateCacheDataProto(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataProtoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TensorShapeProtoT : public flatbuffers::NativeTable {
  typedef TensorShapeProto TableType;
  std::vector<int32_t> dims{};
};

struct TensorShapeProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TensorShapeProtoT NativeTableType;
  typedef TensorShapeProtoBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TensorShapeProtoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIMS = 4
  };
  const flatbuffers::Vector<int32_t> *dims() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DIMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           verifier.EndTable();
  }
  TensorShapeProtoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TensorShapeProtoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TensorShapeProto> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeProtoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TensorShapeProtoBuilder {
  typedef TensorShapeProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dims(flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims) {
    fbb_.AddOffset(TensorShapeProto::VT_DIMS, dims);
  }
  explicit TensorShapeProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TensorShapeProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TensorShapeProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<TensorShapeProto> CreateTensorShapeProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims = 0) {
  TensorShapeProtoBuilder builder_(_fbb);
  builder_.add_dims(dims);
  return builder_.Finish();
}

inline flatbuffers::Offset<TensorShapeProto> CreateTensorShapeProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *dims = nullptr) {
  auto dims__ = dims ? _fbb.CreateVector<int32_t>(*dims) : 0;
  return ace::CreateTensorShapeProto(
      _fbb,
      dims__);
}

flatbuffers::Offset<TensorShapeProto> CreateTensorShapeProto(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeProtoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TensorProtoT : public flatbuffers::NativeTable {
  typedef TensorProto TableType;
  std::string name{};
  std::unique_ptr<ace::TensorShapeProtoT> shape{};
  std::unique_ptr<ace::TensorShapeProtoT> valid_shape{};
  ace::DataType dtype = ace::DataType_FLOAT_32;
  ace::DataFormat dformat = ace::DataFormat_NCHW;
  std::unique_ptr<ace::CacheDataProtoT> data{};
  std::unique_ptr<ace::CacheDataProtoT> scale{};
  TensorProtoT() = default;
  TensorProtoT(const TensorProtoT &o);
  TensorProtoT(TensorProtoT&&) FLATBUFFERS_NOEXCEPT = default;
  TensorProtoT &operator=(TensorProtoT o) FLATBUFFERS_NOEXCEPT;
};

struct TensorProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TensorProtoT NativeTableType;
  typedef TensorProtoBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TensorProtoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SHAPE = 6,
    VT_VALID_SHAPE = 8,
    VT_DTYPE = 10,
    VT_DFORMAT = 12,
    VT_DATA = 14,
    VT_SCALE = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const ace::TensorShapeProto *shape() const {
    return GetPointer<const ace::TensorShapeProto *>(VT_SHAPE);
  }
  const ace::TensorShapeProto *valid_shape() const {
    return GetPointer<const ace::TensorShapeProto *>(VT_VALID_SHAPE);
  }
  ace::DataType dtype() const {
    return static_cast<ace::DataType>(GetField<int8_t>(VT_DTYPE, 10));
  }
  ace::DataFormat dformat() const {
    return static_cast<ace::DataFormat>(GetField<int8_t>(VT_DFORMAT, 1));
  }
  const ace::CacheDataProto *data() const {
    return GetPointer<const ace::CacheDataProto *>(VT_DATA);
  }
  const ace::CacheDataProto *scale() const {
    return GetPointer<const ace::CacheDataProto *>(VT_SCALE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyTable(shape()) &&
           VerifyOffset(verifier, VT_VALID_SHAPE) &&
           verifier.VerifyTable(valid_shape()) &&
           VerifyField<int8_t>(verifier, VT_DTYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_DFORMAT, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(scale()) &&
           verifier.EndTable();
  }
  TensorProtoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TensorProtoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TensorProto> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorProtoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TensorProtoBuilder {
  typedef TensorProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TensorProto::VT_NAME, name);
  }
  void add_shape(flatbuffers::Offset<ace::TensorShapeProto> shape) {
    fbb_.AddOffset(TensorProto::VT_SHAPE, shape);
  }
  void add_valid_shape(flatbuffers::Offset<ace::TensorShapeProto> valid_shape) {
    fbb_.AddOffset(TensorProto::VT_VALID_SHAPE, valid_shape);
  }
  void add_dtype(ace::DataType dtype) {
    fbb_.AddElement<int8_t>(TensorProto::VT_DTYPE, static_cast<int8_t>(dtype), 10);
  }
  void add_dformat(ace::DataFormat dformat) {
    fbb_.AddElement<int8_t>(TensorProto::VT_DFORMAT, static_cast<int8_t>(dformat), 1);
  }
  void add_data(flatbuffers::Offset<ace::CacheDataProto> data) {
    fbb_.AddOffset(TensorProto::VT_DATA, data);
  }
  void add_scale(flatbuffers::Offset<ace::CacheDataProto> scale) {
    fbb_.AddOffset(TensorProto::VT_SCALE, scale);
  }
  explicit TensorProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TensorProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TensorProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<TensorProto> CreateTensorProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<ace::TensorShapeProto> shape = 0,
    flatbuffers::Offset<ace::TensorShapeProto> valid_shape = 0,
    ace::DataType dtype = ace::DataType_FLOAT_32,
    ace::DataFormat dformat = ace::DataFormat_NCHW,
    flatbuffers::Offset<ace::CacheDataProto> data = 0,
    flatbuffers::Offset<ace::CacheDataProto> scale = 0) {
  TensorProtoBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_data(data);
  builder_.add_valid_shape(valid_shape);
  builder_.add_shape(shape);
  builder_.add_name(name);
  builder_.add_dformat(dformat);
  builder_.add_dtype(dtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<TensorProto> CreateTensorProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<ace::TensorShapeProto> shape = 0,
    flatbuffers::Offset<ace::TensorShapeProto> valid_shape = 0,
    ace::DataType dtype = ace::DataType_FLOAT_32,
    ace::DataFormat dformat = ace::DataFormat_NCHW,
    flatbuffers::Offset<ace::CacheDataProto> data = 0,
    flatbuffers::Offset<ace::CacheDataProto> scale = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ace::CreateTensorProto(
      _fbb,
      name__,
      shape,
      valid_shape,
      dtype,
      dformat,
      data,
      scale);
}

flatbuffers::Offset<TensorProto> CreateTensorProto(flatbuffers::FlatBufferBuilder &_fbb, const TensorProtoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ListValueT : public flatbuffers::NativeTable {
  typedef ListValue TableType;
  std::vector<std::string> s{};
  std::vector<int32_t> i{};
  std::vector<float> f{};
  std::vector<bool> b{};
  std::vector<ace::DataType> type{};
};

struct ListValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ListValueT NativeTableType;
  typedef ListValueBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ListValueTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_S = 4,
    VT_I = 6,
    VT_F = 8,
    VT_B = 10,
    VT_TYPE = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *s() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_S);
  }
  const flatbuffers::Vector<int32_t> *i() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_I);
  }
  const flatbuffers::Vector<float> *f() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_F);
  }
  const flatbuffers::Vector<uint8_t> *b() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_B);
  }
  const flatbuffers::Vector<int8_t> *type() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_TYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_S) &&
           verifier.VerifyVector(s()) &&
           verifier.VerifyVectorOfStrings(s()) &&
           VerifyOffset(verifier, VT_I) &&
           verifier.VerifyVector(i()) &&
           VerifyOffset(verifier, VT_F) &&
           verifier.VerifyVector(f()) &&
           VerifyOffset(verifier, VT_B) &&
           verifier.VerifyVector(b()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyVector(type()) &&
           verifier.EndTable();
  }
  ListValueT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ListValueT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ListValue> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ListValueBuilder {
  typedef ListValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s) {
    fbb_.AddOffset(ListValue::VT_S, s);
  }
  void add_i(flatbuffers::Offset<flatbuffers::Vector<int32_t>> i) {
    fbb_.AddOffset(ListValue::VT_I, i);
  }
  void add_f(flatbuffers::Offset<flatbuffers::Vector<float>> f) {
    fbb_.AddOffset(ListValue::VT_F, f);
  }
  void add_b(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> b) {
    fbb_.AddOffset(ListValue::VT_B, b);
  }
  void add_type(flatbuffers::Offset<flatbuffers::Vector<int8_t>> type) {
    fbb_.AddOffset(ListValue::VT_TYPE, type);
  }
  explicit ListValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ListValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ListValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<ListValue> CreateListValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> i = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> f = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> b = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> type = 0) {
  ListValueBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_b(b);
  builder_.add_f(f);
  builder_.add_i(i);
  builder_.add_s(s);
  return builder_.Finish();
}

inline flatbuffers::Offset<ListValue> CreateListValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *s = nullptr,
    const std::vector<int32_t> *i = nullptr,
    const std::vector<float> *f = nullptr,
    const std::vector<uint8_t> *b = nullptr,
    const std::vector<int8_t> *type = nullptr) {
  auto s__ = s ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*s) : 0;
  auto i__ = i ? _fbb.CreateVector<int32_t>(*i) : 0;
  auto f__ = f ? _fbb.CreateVector<float>(*f) : 0;
  auto b__ = b ? _fbb.CreateVector<uint8_t>(*b) : 0;
  auto type__ = type ? _fbb.CreateVector<int8_t>(*type) : 0;
  return ace::CreateListValue(
      _fbb,
      s__,
      i__,
      f__,
      b__,
      type__);
}

flatbuffers::Offset<ListValue> CreateListValue(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AttributeT : public flatbuffers::NativeTable {
  typedef Attribute TableType;
  std::string s{};
  int32_t i = 0;
  bool b = false;
  std::string key{};
  ace::DataType type = ace::DataType_NONE;
  float f = 0.0f;
  std::unique_ptr<ace::TensorProtoT> tensor{};
  std::unique_ptr<ace::ListValueT> list{};
  std::unique_ptr<ace::NamedAttrListT> func{};
  AttributeT() = default;
  AttributeT(const AttributeT &o);
  AttributeT(AttributeT&&) FLATBUFFERS_NOEXCEPT = default;
  AttributeT &operator=(AttributeT o) FLATBUFFERS_NOEXCEPT;
};

struct Attribute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AttributeT NativeTableType;
  typedef AttributeBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AttributeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_S = 4,
    VT_I = 6,
    VT_B = 8,
    VT_KEY = 10,
    VT_TYPE = 12,
    VT_F = 14,
    VT_TENSOR = 16,
    VT_LIST = 18,
    VT_FUNC = 20
  };
  const flatbuffers::String *s() const {
    return GetPointer<const flatbuffers::String *>(VT_S);
  }
  int32_t i() const {
    return GetField<int32_t>(VT_I, 0);
  }
  bool b() const {
    return GetField<uint8_t>(VT_B, 0) != 0;
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const Attribute *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *_key) const {
    return strcmp(key()->c_str(), _key);
  }
  ace::DataType type() const {
    return static_cast<ace::DataType>(GetField<int8_t>(VT_TYPE, 0));
  }
  float f() const {
    return GetField<float>(VT_F, 0.0f);
  }
  const ace::TensorProto *tensor() const {
    return GetPointer<const ace::TensorProto *>(VT_TENSOR);
  }
  const ace::ListValue *list() const {
    return GetPointer<const ace::ListValue *>(VT_LIST);
  }
  const ace::NamedAttrList *func() const {
    return GetPointer<const ace::NamedAttrList *>(VT_FUNC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_S) &&
           verifier.VerifyString(s()) &&
           VerifyField<int32_t>(verifier, VT_I, 4) &&
           VerifyField<uint8_t>(verifier, VT_B, 1) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<float>(verifier, VT_F, 4) &&
           VerifyOffset(verifier, VT_TENSOR) &&
           verifier.VerifyTable(tensor()) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyTable(list()) &&
           VerifyOffset(verifier, VT_FUNC) &&
           verifier.VerifyTable(func()) &&
           verifier.EndTable();
  }
  AttributeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AttributeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Attribute> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AttributeBuilder {
  typedef Attribute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s(flatbuffers::Offset<flatbuffers::String> s) {
    fbb_.AddOffset(Attribute::VT_S, s);
  }
  void add_i(int32_t i) {
    fbb_.AddElement<int32_t>(Attribute::VT_I, i, 0);
  }
  void add_b(bool b) {
    fbb_.AddElement<uint8_t>(Attribute::VT_B, static_cast<uint8_t>(b), 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Attribute::VT_KEY, key);
  }
  void add_type(ace::DataType type) {
    fbb_.AddElement<int8_t>(Attribute::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_f(float f) {
    fbb_.AddElement<float>(Attribute::VT_F, f, 0.0f);
  }
  void add_tensor(flatbuffers::Offset<ace::TensorProto> tensor) {
    fbb_.AddOffset(Attribute::VT_TENSOR, tensor);
  }
  void add_list(flatbuffers::Offset<ace::ListValue> list) {
    fbb_.AddOffset(Attribute::VT_LIST, list);
  }
  void add_func(flatbuffers::Offset<ace::NamedAttrList> func) {
    fbb_.AddOffset(Attribute::VT_FUNC, func);
  }
  explicit AttributeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Attribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Attribute>(end);
    fbb_.Required(o, Attribute::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<Attribute> CreateAttribute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> s = 0,
    int32_t i = 0,
    bool b = false,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    ace::DataType type = ace::DataType_NONE,
    float f = 0.0f,
    flatbuffers::Offset<ace::TensorProto> tensor = 0,
    flatbuffers::Offset<ace::ListValue> list = 0,
    flatbuffers::Offset<ace::NamedAttrList> func = 0) {
  AttributeBuilder builder_(_fbb);
  builder_.add_func(func);
  builder_.add_list(list);
  builder_.add_tensor(tensor);
  builder_.add_f(f);
  builder_.add_key(key);
  builder_.add_i(i);
  builder_.add_s(s);
  builder_.add_type(type);
  builder_.add_b(b);
  return builder_.Finish();
}

inline flatbuffers::Offset<Attribute> CreateAttributeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *s = nullptr,
    int32_t i = 0,
    bool b = false,
    const char *key = nullptr,
    ace::DataType type = ace::DataType_NONE,
    float f = 0.0f,
    flatbuffers::Offset<ace::TensorProto> tensor = 0,
    flatbuffers::Offset<ace::ListValue> list = 0,
    flatbuffers::Offset<ace::NamedAttrList> func = 0) {
  auto s__ = s ? _fbb.CreateString(s) : 0;
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return ace::CreateAttribute(
      _fbb,
      s__,
      i,
      b,
      key__,
      type,
      f,
      tensor,
      list,
      func);
}

flatbuffers::Offset<Attribute> CreateAttribute(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NamedAttrListT : public flatbuffers::NativeTable {
  typedef NamedAttrList TableType;
  std::string name{};
  std::vector<std::unique_ptr<ace::AttributeT>> attr{};
  NamedAttrListT() = default;
  NamedAttrListT(const NamedAttrListT &o);
  NamedAttrListT(NamedAttrListT&&) FLATBUFFERS_NOEXCEPT = default;
  NamedAttrListT &operator=(NamedAttrListT o) FLATBUFFERS_NOEXCEPT;
};

struct NamedAttrList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NamedAttrListT NativeTableType;
  typedef NamedAttrListBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NamedAttrListTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ATTR = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ace::Attribute>> *attr() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ace::Attribute>> *>(VT_ATTR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ATTR) &&
           verifier.VerifyVector(attr()) &&
           verifier.VerifyVectorOfTables(attr()) &&
           verifier.EndTable();
  }
  NamedAttrListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NamedAttrListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NamedAttrList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NamedAttrListBuilder {
  typedef NamedAttrList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NamedAttrList::VT_NAME, name);
  }
  void add_attr(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ace::Attribute>>> attr) {
    fbb_.AddOffset(NamedAttrList::VT_ATTR, attr);
  }
  explicit NamedAttrListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NamedAttrList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NamedAttrList>(end);
    return o;
  }
};

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ace::Attribute>>> attr = 0) {
  NamedAttrListBuilder builder_(_fbb);
  builder_.add_attr(attr);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    std::vector<flatbuffers::Offset<ace::Attribute>> *attr = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto attr__ = attr ? _fbb.CreateVectorOfSortedTables<ace::Attribute>(attr) : 0;
  return ace::CreateNamedAttrList(
      _fbb,
      name__,
      attr__);
}

flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CacheDataProtoT *CacheDataProto::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CacheDataProtoT>(new CacheDataProtoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CacheDataProto::UnPackTo(CacheDataProtoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = u(); if (_e) { _o->u.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->u.begin()); } }
  { auto _e = c(); if (_e) { _o->c.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->c.begin()); } }
  { auto _e = s(); if (_e) { _o->s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->s[_i] = _e->Get(_i)->str(); } } }
  { auto _e = i(); if (_e) { _o->i.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->i[_i] = _e->Get(_i); } } }
  { auto _e = l(); if (_e) { _o->l.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->l[_i] = _e->Get(_i); } } }
  { auto _e = f(); if (_e) { _o->f.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->f[_i] = _e->Get(_i); } } }
  { auto _e = size(); _o->size = _e; }
}

inline flatbuffers::Offset<CacheDataProto> CacheDataProto::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataProtoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCacheDataProto(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CacheDataProto> CreateCacheDataProto(flatbuffers::FlatBufferBuilder &_fbb, const CacheDataProtoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CacheDataProtoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _u = _o->u.size() ? _fbb.CreateVector(_o->u) : 0;
  auto _c = _o->c.size() ? _fbb.CreateVector(_o->c) : 0;
  auto _s = _o->s.size() ? _fbb.CreateVectorOfStrings(_o->s) : 0;
  auto _i = _o->i.size() ? _fbb.CreateVector(_o->i) : 0;
  auto _l = _o->l.size() ? _fbb.CreateVector(_o->l) : 0;
  auto _f = _o->f.size() ? _fbb.CreateVector(_o->f) : 0;
  auto _size = _o->size;
  return ace::CreateCacheDataProto(
      _fbb,
      _u,
      _c,
      _s,
      _i,
      _l,
      _f,
      _size);
}

inline TensorShapeProtoT *TensorShapeProto::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TensorShapeProtoT>(new TensorShapeProtoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TensorShapeProto::UnPackTo(TensorShapeProtoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dims(); if (_e) { _o->dims.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dims[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<TensorShapeProto> TensorShapeProto::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeProtoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTensorShapeProto(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TensorShapeProto> CreateTensorShapeProto(flatbuffers::FlatBufferBuilder &_fbb, const TensorShapeProtoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TensorShapeProtoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dims = _o->dims.size() ? _fbb.CreateVector(_o->dims) : 0;
  return ace::CreateTensorShapeProto(
      _fbb,
      _dims);
}

inline TensorProtoT::TensorProtoT(const TensorProtoT &o)
      : name(o.name),
        shape((o.shape) ? new ace::TensorShapeProtoT(*o.shape) : nullptr),
        valid_shape((o.valid_shape) ? new ace::TensorShapeProtoT(*o.valid_shape) : nullptr),
        dtype(o.dtype),
        dformat(o.dformat),
        data((o.data) ? new ace::CacheDataProtoT(*o.data) : nullptr),
        scale((o.scale) ? new ace::CacheDataProtoT(*o.scale) : nullptr) {
}

inline TensorProtoT &TensorProtoT::operator=(TensorProtoT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(shape, o.shape);
  std::swap(valid_shape, o.valid_shape);
  std::swap(dtype, o.dtype);
  std::swap(dformat, o.dformat);
  std::swap(data, o.data);
  std::swap(scale, o.scale);
  return *this;
}

inline TensorProtoT *TensorProto::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TensorProtoT>(new TensorProtoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TensorProto::UnPackTo(TensorProtoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = shape(); if (_e) _o->shape = std::unique_ptr<ace::TensorShapeProtoT>(_e->UnPack(_resolver)); }
  { auto _e = valid_shape(); if (_e) _o->valid_shape = std::unique_ptr<ace::TensorShapeProtoT>(_e->UnPack(_resolver)); }
  { auto _e = dtype(); _o->dtype = _e; }
  { auto _e = dformat(); _o->dformat = _e; }
  { auto _e = data(); if (_e) _o->data = std::unique_ptr<ace::CacheDataProtoT>(_e->UnPack(_resolver)); }
  { auto _e = scale(); if (_e) _o->scale = std::unique_ptr<ace::CacheDataProtoT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<TensorProto> TensorProto::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TensorProtoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTensorProto(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TensorProto> CreateTensorProto(flatbuffers::FlatBufferBuilder &_fbb, const TensorProtoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TensorProtoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _shape = _o->shape ? CreateTensorShapeProto(_fbb, _o->shape.get(), _rehasher) : 0;
  auto _valid_shape = _o->valid_shape ? CreateTensorShapeProto(_fbb, _o->valid_shape.get(), _rehasher) : 0;
  auto _dtype = _o->dtype;
  auto _dformat = _o->dformat;
  auto _data = _o->data ? CreateCacheDataProto(_fbb, _o->data.get(), _rehasher) : 0;
  auto _scale = _o->scale ? CreateCacheDataProto(_fbb, _o->scale.get(), _rehasher) : 0;
  return ace::CreateTensorProto(
      _fbb,
      _name,
      _shape,
      _valid_shape,
      _dtype,
      _dformat,
      _data,
      _scale);
}

inline ListValueT *ListValue::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ListValueT>(new ListValueT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ListValue::UnPackTo(ListValueT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = s(); if (_e) { _o->s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->s[_i] = _e->Get(_i)->str(); } } }
  { auto _e = i(); if (_e) { _o->i.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->i[_i] = _e->Get(_i); } } }
  { auto _e = f(); if (_e) { _o->f.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->f[_i] = _e->Get(_i); } } }
  { auto _e = b(); if (_e) { _o->b.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->b[_i] = _e->Get(_i) != 0; } } }
  { auto _e = type(); if (_e) { _o->type.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->type[_i] = static_cast<ace::DataType>(_e->Get(_i)); } } }
}

inline flatbuffers::Offset<ListValue> ListValue::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateListValue(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ListValue> CreateListValue(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ListValueT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _s = _o->s.size() ? _fbb.CreateVectorOfStrings(_o->s) : 0;
  auto _i = _o->i.size() ? _fbb.CreateVector(_o->i) : 0;
  auto _f = _o->f.size() ? _fbb.CreateVector(_o->f) : 0;
  auto _b = _o->b.size() ? _fbb.CreateVector(_o->b) : 0;
  auto _type = _o->type.size() ? _fbb.CreateVectorScalarCast<int8_t>(flatbuffers::data(_o->type), _o->type.size()) : 0;
  return ace::CreateListValue(
      _fbb,
      _s,
      _i,
      _f,
      _b,
      _type);
}

inline AttributeT::AttributeT(const AttributeT &o)
      : s(o.s),
        i(o.i),
        b(o.b),
        key(o.key),
        type(o.type),
        f(o.f),
        tensor((o.tensor) ? new ace::TensorProtoT(*o.tensor) : nullptr),
        list((o.list) ? new ace::ListValueT(*o.list) : nullptr),
        func((o.func) ? new ace::NamedAttrListT(*o.func) : nullptr) {
}

inline AttributeT &AttributeT::operator=(AttributeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(s, o.s);
  std::swap(i, o.i);
  std::swap(b, o.b);
  std::swap(key, o.key);
  std::swap(type, o.type);
  std::swap(f, o.f);
  std::swap(tensor, o.tensor);
  std::swap(list, o.list);
  std::swap(func, o.func);
  return *this;
}

inline AttributeT *Attribute::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AttributeT>(new AttributeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Attribute::UnPackTo(AttributeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = s(); if (_e) _o->s = _e->str(); }
  { auto _e = i(); _o->i = _e; }
  { auto _e = b(); _o->b = _e; }
  { auto _e = key(); if (_e) _o->key = _e->str(); }
  { auto _e = type(); _o->type = _e; }
  { auto _e = f(); _o->f = _e; }
  { auto _e = tensor(); if (_e) _o->tensor = std::unique_ptr<ace::TensorProtoT>(_e->UnPack(_resolver)); }
  { auto _e = list(); if (_e) _o->list = std::unique_ptr<ace::ListValueT>(_e->UnPack(_resolver)); }
  { auto _e = func(); if (_e) _o->func = std::unique_ptr<ace::NamedAttrListT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<Attribute> Attribute::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAttribute(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Attribute> CreateAttribute(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AttributeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _s = _o->s.empty() ? 0 : _fbb.CreateString(_o->s);
  auto _i = _o->i;
  auto _b = _o->b;
  auto _key = _fbb.CreateString(_o->key);
  auto _type = _o->type;
  auto _f = _o->f;
  auto _tensor = _o->tensor ? CreateTensorProto(_fbb, _o->tensor.get(), _rehasher) : 0;
  auto _list = _o->list ? CreateListValue(_fbb, _o->list.get(), _rehasher) : 0;
  auto _func = _o->func ? CreateNamedAttrList(_fbb, _o->func.get(), _rehasher) : 0;
  return ace::CreateAttribute(
      _fbb,
      _s,
      _i,
      _b,
      _key,
      _type,
      _f,
      _tensor,
      _list,
      _func);
}

inline NamedAttrListT::NamedAttrListT(const NamedAttrListT &o)
      : name(o.name) {
  attr.reserve(o.attr.size());
  for (const auto &attr_ : o.attr) { attr.emplace_back((attr_) ? new ace::AttributeT(*attr_) : nullptr); }
}

inline NamedAttrListT &NamedAttrListT::operator=(NamedAttrListT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(attr, o.attr);
  return *this;
}

inline NamedAttrListT *NamedAttrList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<NamedAttrListT>(new NamedAttrListT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NamedAttrList::UnPackTo(NamedAttrListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = attr(); if (_e) { _o->attr.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->attr[_i] = std::unique_ptr<ace::AttributeT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<NamedAttrList> NamedAttrList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNamedAttrList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NamedAttrListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _attr = _o->attr.size() ? _fbb.CreateVector<flatbuffers::Offset<ace::Attribute>> (_o->attr.size(), [](size_t i, _VectorArgs *__va) { return CreateAttribute(*__va->__fbb, __va->__o->attr[i].get(), __va->__rehasher); }, &_va ) : 0;
  return ace::CreateNamedAttrList(
      _fbb,
      _name,
      _attr);
}

inline const flatbuffers::TypeTable *CacheDataProtoTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_CHAR, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_LONG, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_LONG, 0, -1 }
  };
  static const char * const names[] = {
    "u",
    "c",
    "s",
    "i",
    "l",
    "f",
    "size"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TensorShapeProtoTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 1, -1 }
  };
  static const char * const names[] = {
    "dims"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *TensorProtoTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 1 },
    { flatbuffers::ET_CHAR, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ace::TensorShapeProtoTypeTable,
    ace::DataTypeTypeTable,
    ace::DataFormatTypeTable,
    ace::CacheDataProtoTypeTable
  };
  static const char * const names[] = {
    "name",
    "shape",
    "valid_shape",
    "dtype",
    "dformat",
    "data",
    "scale"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ListValueTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_BOOL, 1, -1 },
    { flatbuffers::ET_CHAR, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ace::DataTypeTypeTable
  };
  static const char * const names[] = {
    "s",
    "i",
    "f",
    "b",
    "type"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *AttributeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ace::DataTypeTypeTable,
    ace::TensorProtoTypeTable,
    ace::ListValueTypeTable,
    ace::NamedAttrListTypeTable
  };
  static const char * const names[] = {
    "s",
    "i",
    "b",
    "key",
    "type",
    "f",
    "tensor",
    "list",
    "func"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 9, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *NamedAttrListTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ace::AttributeTypeTable
  };
  static const char * const names[] = {
    "name",
    "attr"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace ace

#endif  // FLATBUFFERS_GENERATED_TENSOR_ACE_H_
